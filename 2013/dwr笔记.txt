helloworld:
	1. 拷贝dwr.jar到lib下。
	2. 编写web.xml文件，添加dwr的servlet
		<servlet>
			<servlet-name>dwr-invoker</servlet-name>
			<servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
			<init-param>
				<param-name>debug</param-name>
				<param-value>true</param-value>
			</init-param>
			<load-on-startup>1</load-on-startup>
		</servlet>

		<servlet-mapping>
			<servlet-name>dwr-invoker</servlet-name>
			<url-pattern>/dwr/*</url-pattern>   <!-- 该dwr目录是加载dwr的jar包时自动产生的 -->
		</servlet-mapping>
	3. 编写功能程序
		public class FirstDWR {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			public String sayHi(String name) {
				return "hi,"+name+","+sdf.format(new Date());
			}
		}
	4. 在web-inf下添加dwr.xml文件。
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE dwr PUBLIC "-//GetAhead Limited//DTD Direct Web Remoting 3.0//EN" "http://getahead.org/dwr/dwr30.dtd">
		<dwr>
		  <allow>
		    <create creator="new">
		      <param name="class" value="com.dwr.test.FirstDWR"/> 
		    </create>
		  </allow>
		</dwr>
	5. 测试
		http://lcoalhost:8080/DWR/drw/     debug页面
	6. 在页面中使用
	<script type='text/javascript' src='/DWR/dwr/engine.js'></script>
	<script type='text/javascript' src='/DWR/dwr/interface/FirstDWR.js'></script>
	<script type='text/javascript' src='/DWR/dwr/util.js'></script>  <!-- 以上3个js可以再debug页面中找到 -->
	<script type="text/javascript">
		function updateResult(){
			var username = dwr.util.getValue("username"); //会根据name="username"或者id="username"来获取值
			FirstDWR.sayHi(username, callback);
			function callback(data){ //回调函数，data是返回的数据
				var oldResult = dwr.util.getValue("result");
				dwr.util.setValue("result", data+"\r\n"+oldResult); //为result(name或id)设置值
			}
		}
	</script>
	username:<input type="text" name="username" onchange="updateResult()" />
	result:<textarea rows="10" cols="30" name="result"></textarea>

在线聊天室雏形：
	页面：
		<script type='text/javascript'>
			function sendMessage(){
				var text = dwr.util.getValue("text");
				ChatUtil.sendMessage(text);
			}
		</script>
		<pre>
			发送内容
			<input type="text" id="text" onkeypress="dwr.util.onReturn(event, sendMessage)">
			<input type="button" value="send" onclick="sendMessage()">
			<hr>
			<ul id="chatlog" style="list-style: none;">
			</ul>
		</pre>
	vo:
		public class WebMessage {
			private long id=System.currentTimeMillis();
			private String text;
			public WebMessage(String newText) {
				text=newText;
				if(text!=null&&text.length()>30) {
					text=text.substring(0, 30)+"......";
				}
			}
			// getter
		}
	生成js的pojo：
	public class ChatUtil {
		private LinkedList<WebMessage> messages = new LinkedList<WebMessage>();
		//1. 要保证每页显示信息的条目数，比如显示只10条信息，显示第11条信息的同时清除第1条信息。使用LinkedList来模拟队列
		//2. 自动刷新接受信息， ajax
		public void sendMessage(String text) {
			WebContext wctx = WebContextFactory.get(); //在dwr中获取web容器，从而获得request,session等对象
			String remoteAddr = wctx.getHttpServletRequest().getRemoteAddr();
			WebMessage webMessage = new WebMessage("来自"+remoteAddr+"朋友的信息："+text);
			messages.addFirst(webMessage);
			//保证链表的长度
			while(messages.size()>10) {
				messages.removeLast();
			}
			notifyAllClient(wctx, messages);
		}
		
		//必须是公有的方法，否则无法生成对应的js函数
		public void notifyAllClient(WebContext wctx, LinkedList<WebMessage> msgQueue) {
			//1. 清空发信息页面的输入框
			String currentPage = wctx.getCurrentPage();
			Util utilThis = new Util(wctx.getScriptSession());
			utilThis.setValue("text", "");
			//2. 把信息广播到与当前页面连接的其他页面
			Util utilAll = new Util(wctx.getScriptSessionsByPage(currentPage));
			utilAll.removeAllOptions("chatlog");  //清空ul
			utilAll.addOptions("chatlog", msgQueue, "text"); //第三个参数是 页面id为text的input，
		}
	}
	dwr.xml:
	<dwr>
	  <allow>
	    <create creator="new" javascript="ChatUtil" scope="application">
		<param name="class" value="com.zzjie.chat.invoker.ChatUtil"></param>
	    </create>
	    <convert match="com.zzjie.chat.vo.WebMessage" converter="bean"></convert> <!-- ChatUtil里使用了WebMessage，所以要声明，否则无法识别 -->
	  </allow>
	</dwr>

dwr组件分析：
	实现一种操作：js到java之间的操作
	
	dwr的数据类型转换：
	<convert>:java和js之间类型的转换
	java			js
	List,Collection,数组	Array
	Boolean			Boolean
	Map,JavaBean		Object
	String			String
	Date			Date
	int float double	number
	dom			XMLDom
	null			undefined

	util.js中的常用函数：
	addOptions 添加下拉列表选项，可以使用Map来添加
	removeAllOptions 删除下拉列表所有选项
	addRows("tbodyId") 给表格添加行
	removeAllRows(ele, option) 删除表格所有行
	onReturn()
	getValue/setValue

使用Annotation替换dwr.xml
	1. 引入dwrAnnotation.jar
	2. 在web.xml的dwrservlet中加上参数配置 <init-param>..</init-param>
	3. 使用：
		@Create(name="xx")
		class xx {
			private YY yy
			//所有方法会转换成js函数
		}
		
		@Convert
		class YY {
			@RemoteProperty
			private int id;
		}

dwr与spring整合：
	<create creator="spring" javascript="UserDao">
		<param name="beanName" value="userDao"></param>
	</create>

dwr与hibernate整合:
	<convert match="com.vo.User" converter="hibernate3"></convert>
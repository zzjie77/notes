1.在做程序自动安装更新的时候 ,必须保证程序的签名和包名是相同.
C:\Documents and Settings\zehua\.android  \ debug.keystore

Re-installation failed due to different application signatures.
Please execute 'adb uninstall cn.itcast.mobilesafe' in a shell.
debug的签名,开发时候的签名
报这个错就说明签名不一样， 需要卸载以前的应用程序


两种上下文

03-30 04:01:48.632: ERROR/AndroidRuntime(4841): 
android.view.WindowManager$BadTokenException: Unable to add window -- token null is not for an application

applicationcontext  生命周期 进程存在 上下文就存在
activity.this  activity 在任务栈 上下文存在 
在activity中打开dialog时，应该使用activity的上下文
如果希望数据库连接长期打开，就要死好用applicationcontext

android.jar的class文件和xml文件可以使用apk-tool反编译
apktool -d android.jar


手机定位的方式：
1 gps  误差(1米内)   （民用的gps，需要头顶空旷，没有屋顶，大树等覆盖物）
  agps (2-10米) 一般手机使用这个，比较便宜
2 使用基站定位 （几百米到几千米）
	根据到附近基站的信号强弱来推断距离基站的位置(需要3个基站)，所以不太精确
	好处：只要手机有信号就能定位
3 还有其他，如wifi...

android2.2之后提供了device admin,可以锁屏，恢复出厂设置...
	1.创建 MyAdmin 的广播接受者 继承 DeviceAdminReceiver
	<receiver android:name=".MyAdmin">
		<!-- meta-data提供一些配置信息 -->
		<meta-data android:name="android.app.device_admin" android:resource="@xml/my_admin" />
		<intent-filter>
			<action android:name="android.app.action.DEVICE_ADMIN_ENABLED" />
		</intent-filter>
	</receiver>
	
	创建xml/my_admin.xml	
	<?xml version="1.0" encoding="utf-8"?>
	<device-admin xmlns:android="http://schemas.android.com/apk/res/android">
        <uses-policies>
            <limit-password />
            <watch-login />
            <reset-password />
            <force-lock />
            <wipe-data />
        </uses-policies>
	</device-admin>

	2.获取IDevicePolicyManager
	Method method = Class.forName("android.os.ServiceManager").getMethod("getService", String.class);
	IBinder binder = (IBinder) method.invoke(null,ew Object[] { Context.DEVICE_POLICY_SERVICE });
	mService = IDevicePolicyManager.Stub.asInterface(binder);
	// 也可以 DevicePolicyManager manager = (DevicePolicyManager)getSystemService(DEVICE_POLICY_SERVICE);

	3.注册广播接受者为admin设备
	ComponentName mAdminName = new ComponentName(this, MyAdmin.class);
	if (mService != null) {
		if (!mService.isAdminActive(mAdminName)) {  //如果设备不是device admin的组件
			Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN); //激活为device admin的组件的意图
			intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN,mAdminName);
			startActivity(intent);
		}
	}
	只要程序有device admin的组件，程序就不能被直接卸载。 可以在设置-位置与安全-设备管理器-取消激活对应的程序，这样就能卸载了

	manager.lockNow()锁屏  manager.wipeData(0) 恢复出厂设置，参数暂时没用  manager.resetPassword("123",0)重设密码为123，


知识点整理：
1.	理解 application的图标 和 桌面activity的图标 (一般是一样的，也可以不同)
在清单文件中对应的节点配置.
2.	Splash全屏显示
// 取消标题栏
requestWindowFeature(Window.FEATURE_NO_TITLE);
setContentView(..);
// 完成窗体的全屏显示 // 取消掉状态栏
getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
Ps: 也可以通过主题设置窗体全屏显示 android:theme="@android:style/Theme.NoTitleBar.Fullscreen"

3.	pull解析xml
4.	URL httpUrlConnection 
5.	获取当前客户端版本号
PackageManager:  context.getPackageManager();  manager.getPackageInfo(context.getPackageName(), 0).versionName; //0没意义

6.	安装新的apk
激活系统的安装的组件 intent();
设置数据 和数据的类型 
正确：setDataAndType();
错误：先setData(); 后setType(); 因为setType会把data覆盖掉
	intent.setAction(Intent.ACTION_VIEW);
	intent.setDataAndType(Uri.fromFile(file), "application/vnd.android.package-archive");  // apk的MIME类型

7.	对话框 创建 AlertDialog.buidler = new Builder();（setTitle,setMessage,setPositiveButton）
Builder.create().show();

8.	Handler message 子线程里面通知主线程ui更新 
在主线程创建handler,在子线程发送消息给主线程，主线程的handleMessage方法里处理更新
private Handler handler = new Handler(new Callback() {
	public boolean handleMessage(Message msg) {
		..
	}
});
子线程： handler.sendMessage();

9.	GridView ListView  adapter  继承 BaseAdapter 

10.	Xml ->定义一个背景颜色  shape  (参考api文件) 
<shape xmlns:android="http://schemas.android.com/apk/res/android"android:shape="rectangle" >
	<gradient android:startColor="#ff2c2d2d" android:centerColor="#ff262626"android:endColor="#ff515151"/>
</shape>

11.	Xml -> selector 颜色选择器 根据当前控件的状态显示不同颜色. (按下，获取焦点，失去焦点..)
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@drawable/button_background" android:state_enabled="true" android:state_window_focused="false"/>
    <item android:drawable="@drawable/button_background_selected" android:state_pressed="true"/>
    <item android:drawable="@drawable/button_background" android:state_focused="true"/>
    <item android:drawable="@drawable/button_background"/>
</selector>

12.	Sharedpreference 的使用 
sp = getSharedPreferences("config", MODE_PRIVATE); //如果使用getPreferences(mode) 会获取以当前activity为名称的sp
Sp.edit(); -> Editor editor 
Editor.putBoolean(key, value);
Editor.commit(); // 真正的提交数据 
sp.getString(key, defValue) //

13.	自定义对话框的写法 
定义一个样式文件 重写了系统的一些默认配置 
<style name="myDialog" parent="@android:style/Theme.Dialog">
    <item name="android:windowBackground">@drawable/title_background</item> <!-- 重写dialog的样式-->
    <item name="android:windowNoTitle">true</item>
</style>

14.	Md5的编码和加密 (不可逆的加密算法，是摘要算法，生成的Md5值是固定长度) 
MessageDigest digest = MessageDigest.getInstance("MD5");
byte[] bytes = digest.digest(pwd.getBytes());
//转换为固定长度的16进制字符串
StringBuilder sb = new StringBuilder();
for (int i = 0; i < bytes.length; i++) {
	//将byte[i]从-128-128转换为0-255,因为-1使用Integer.toHexString得到的字符串是ffffffff，
	//(0-255之间)而转换为正数后得到的字符串长度最多是2位， 然后把1位的转换为2位。 如a->0a
	String s = Integer.toHexString(0xff & bytes[i]); 
	if(s.length()==1) {
		sb.append("0"+s);
	} else {
		sb.append(s);
	}
}
return sb.toString();

15.	style的使用 
如果控件有很多样式，布局是相同的，可以抽取出来一个style，然后引用它
 <style name="devide_line_style">
    <item name="android:layout_width">match_parent</item>
    <item name="android:layout_height">1dip</item>
    <item name="android:layout_marginTop">8dip</item>
    <item name="android:background">@drawable/devide_line</item>
</style>
引用：<Button style="devide_line_style"/> 

16.	更改activity切换的动画效果 
startActivity();
overridePendingTransition(R.anim.alpha_in, R.anim.alpha_out);
<alpha xmlns:android="http://schemas.android.com/apk/res/android" android:fromAlpha="0.0" 
android:toAlpha="1.0" android:duration="300"> alpha_in 从0.0完全透明到1.0不透明 //alpha淡入淡出，translate滑动动画..

17.	获取新打开的activity的返回值 
startactivityforResult(intent, requestCode);
onActivityResult(); //重写主acvitity的此方法，在被激活的activity关闭返回的时候调用此方法

Intent intent = getIntent(); // intent用于返回数据给主activity
intent.putExtra("phone", info.getPhone());
setResult(resultCode, intent);  
finish();     //关闭activity后，会调用onActivityResult方法

18.	DeviceAdmin的技术 2.2版本支持 -> wipedata() setpwd();
不能直接被卸载 需要在设置-..-设备管理器里面取消激活后才能卸载

19.checkbox的状态 状态变更的监听器

20.gps , 定位方式：gps wifi 基站 
获取系统服务LOCATION_SERVICE  ->locationManager  
记得把权限加到清单文件 

21 .广播接受者 
有序广播 ->1.一般的有序广播 abortbroadcast()  (-1000~1000)  1000的优先级最高
2.指定了接受者的有序广播setResult(null);

无序的广播

22. 短信内容的处理  （创建 SMSReceiver 继承 BroadcastReceiver）在onReceive方法里：
Object[] pdus = (Object[]) intent.getExtras().get("pdus"); //接收短信
for(Object pdu : pdus) {
	SmsMessage sms = SmsMessage.createFromPdu((byte[])pdu);
	String content = sms.getMessageBody(); //短信内容
	String sender = sms.getOriginatingAddress(); //发送者
	abortBroadcast();
	//发送短信
	SmsManager smsManager = SmsManager.getDefault();
	smsManager.sendTextMessage(sender, null, "短信内容", null, null); 
}

gps:
	public class GPSInfoProvider {

		private static GPSInfoProvider mGPSInfoProvider;
		private static Context context;
		private static MyLocationListener listener;
		private LocationManager manager ;
		
		private GPSInfoProvider(){}
		
		public static synchronized GPSInfoProvider getInstance(Context context){
			if(mGPSInfoProvider==null) {
				mGPSInfoProvider = new GPSInfoProvider();
				GPSInfoProvider.context = context;
			}
			return mGPSInfoProvider;
		}
		
		/** 获取gps信息，这里只获取经纬度 */
		public String getLocation(){
			manager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
			String provider = getProvider(manager);
			
	//		manager.requestLocationUpdates(provider, minTime, minDistance, listener);
			//最少经过minTime毫秒， minDistance米重新获取gps信息 ， 
			manager.requestLocationUpdates(provider, 60000, 50, getListener());
			
			SharedPreferences sp = context.getSharedPreferences("config", Context.MODE_PRIVATE);
			String position = sp.getString("position", "");
			return position;
		}
		
		private synchronized  MyLocationListener getListener(){
			if(listener==null)  listener = new MyLocationListener();
			return listener;
		}
		
		/** 停止获取gps信息 */
		public void stopGPSListener(){
			manager.removeUpdates(getListener());
		}
		
		private class MyLocationListener implements LocationListener {
			/** 位置发生改变*/
			public void onLocationChanged(Location location) {
				String latitute = "latitute " + location.getLatitude(); //纬度
				String longtute = "longtute " + location.getLongitude(); //经度
				SharedPreferences sp = context.getSharedPreferences("config", Context.MODE_PRIVATE);
				Editor editor = sp.edit();
				editor.putString("localtion", latitute + "-" +longtute );
				editor.commit(); //最近一次的位置信息保存到sharePreferences
			}
			/** 某个设备被关闭*/
			public void onProviderDisabled(String provider) {
			}
			/** 某个设备被打开*/
			public void onProviderEnabled(String provider) {
			}
			/** 某个设备的状态发生改变： 打开->关闭 或 关闭->打开*/
			public void onStatusChanged(String provider, int status, Bundle extras) {
			}
		}
		
		/** 最好的位置提供者 */
		private String getProvider(LocationManager manager){
			Criteria criteria = new Criteria();
			criteria.setAccuracy(Criteria.ACCURACY_FINE); //精度
			criteria.setAltitudeRequired(true); // 是否关注海拔高度
			criteria.setCostAllowed(true); // 额外开销，如和运营商通信
			criteria.setPowerRequirement(Criteria.POWER_MEDIUM) ;// 耗电等级
			criteria.setSpeedRequired(true); //对速度是否敏感
			return manager.getBestProvider(criteria, false); //根据criteria的条件查找出最合适的位置提供者， 
			//第二个参数enableonly为true表示只获取当前系统已经打开的(如只打开了gps，wifi,没打开基站), false表示可以获取未打开的
		}
	}

获取号码归属地：
	1. 通过网络获取归属地 缺陷: 网络

	2. 本地的数据库  (有一个电话号码的归属地)
	sqlite的数据库 

	android下的数据库 .db 
	一定要有一张 android_metadata 

	程序 开发中有一些大的素材 和资源文件 
	1. res目录建立一个文件夹 raw  在R文件中生成一个id的引用 
	最好推荐存放一些小的资源 几十k 几百K 

	2. assets 资产目录
	不会把里面的内容在R 文件中生成一个引用
	assets 不推荐我们存在1M 文件
	appt 打包工具可能出现问题.

	3. javame 
	把大的资源文件放置在src目录下 通过类加载器的方式 获取这个资源文件
	导致我们应用程序的体积非常大.

	4. 程序的主apk很小 素材文件 资源文件从服务器上下载 
	sdcard rom 
	一般游戏软件  大的oa软件 
	地图软件 离线地体20~100M~ 1G 

号码归属地
	1.手机号码 11位  13 15 18 + 9位数字
	^1[3458]\d{9}$

	2.固定电话 
	7位 8位  本地电话 
	10位 3位区号 +７位的电话号码
	11位 4位区号 + 7位的电话号码 3位的区号 +８位的电话号码
	12位 4位区号 +８位的电话号码　

点击和触摸的区别是什么?
	点击: 一组动作的集合 手指按下着按钮 手指要在按钮停留一段时间 手指离开按钮
	触摸: 手指一挨着屏幕 手指移动 手指离开屏幕


callSmsActivity -- context menu使用，list view使用， arrayAdapter的缺陷


没有网络的情况下如何查看android系统的源码：
	1.将/system/app/TelephonyProvider.apk拷贝到电脑上。然后在cmd上使用apktool d TelephonyProvider.apk反编译出资源文件
	2.将TelephonyProvider.apk解压出classes.dex， 在cmd使用dex2jar classes.dex反编译出jar文件
	3.使用jd-gui.jar查看生成的jar包
	

通过包管理器获取 已安装的所有的程序信息的集合：
	private Context context;
	private PackageManager packmanager;
	
	public AppInfoProvider(Context context) {
		this.context = context;
		packmanager = context.getPackageManager();
	}
	/**
	 * 返回当前手机里面安装的所有的程序信息的集合
	 * @return 应用程序的集合
	 */
	public List<AppInfo> getAllApps(){
		List<AppInfo> appinfos = new ArrayList<AppInfo>();
		List<PackageInfo> packinfos = packmanager.getInstalledPackages(PackageManager.GET_UNINSTALLED_PACKAGES);
		for(PackageInfo info :packinfos){
			AppInfo myApp = new AppInfo();
			String packname = info.packageName;
			myApp.setPackname(packname);
			ApplicationInfo appinfo = info.applicationInfo;
			Drawable icon = appinfo.loadIcon(packmanager);  //app的图标
			myApp.setIcon(icon);
			String appname = appinfo.loadLabel(packmanager).toString(); //app的名称
			myApp.setAppname(appname);
			if(filterApp(appinfo)){    //是否第三方应用
				myApp.setSystemApp(false);
			}else{
				myApp.setSystemApp(true);
			}
			appinfos.add(myApp);
		}
		return appinfos;
	}

	/**判断某个应用程序是 不是三方的应用程序。  android setting源代码中拷贝出来的方法 */
    public boolean filterApp(ApplicationInfo info) {
        if ((info.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0) {  //系统应用更新后变成第三方应用
            return true;
        } else if ((info.flags & ApplicationInfo.FLAG_SYSTEM) == 0) { //&系统应用标志位为0，说明是第三方应用
            return true;
        }
        return false;
    }


优化的问题：
1. 怎么去优化listView 怎么优化gridView
2. 怎么去优化java虚拟机
所有的优化问题：
1. 时间换时间：
	360安全卫士（禁用一些开机启动项,延时加载一些开机启动项）
	优化android系统的开机启动时间.
	sd卡 .mp3 .jpg 
2. 空间换时间：
	图片资源 sd->内存 -> 显示
	定义内存缓存-> 显示
	
优化ListView:
	1. 使用static成员变量iv，tv来减少空间使用，当调用10000次getView时，也只在栈中创建2个变量
	2. 使用历史view对象convertView来防止view对象的反复创建. 因为inflate是个很耗时的操作
	public class AppManagerAdapter extends BaseAdapter {
		private static final String TAG = "AppManagerAdapter";
		private List<AppInfo> appinfos;
		private Context context;
		private static ImageView iv;
		private static TextView tv;

		public AppManagerAdapter(List<AppInfo> appinfos, Context context) {
			this.appinfos = appinfos;
			this.context = context;
		}

		public int getCount() {
			return appinfos.size();
		}

		public Object getItem(int position) {
			return appinfos.get(position);
		}

		public long getItemId(int position) {
			return position;
		}

		/**View convertView (转化view对象 ,历史view对象的缓存) convertview 就是拖动的时候被回收掉的view对象*/
		public View getView(int position, View convertView, ViewGroup parent) {
			AppInfo info = appinfos.get(position);
			View view;
			if (convertView == null) {
				view = View.inflate(context, R.layout.app_item, null);  //inflate操作十分耗时
			}else{
				view = convertView;
			}
			iv = (ImageView) view.findViewById(R.id.iv_app_icon);
			tv = (TextView) view.findViewById(R.id.tv_app_name);
			iv.setImageDrawable(info.getIcon());
			tv.setText(info.getAppname());
			return view;
		}
	}



PopupWindow（比activity更轻量级的窗体）使用
根据包名打开程序









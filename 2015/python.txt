输入输出：
	print('The quick brown fox', 'jumps over', 'the lazy dog') #逗号输出空格
	name = input()  #等待输入
	print('hello,', name)

数据类型：
	整数
		 10 / 3 = 3.3333      10 // 3 === 3
	浮点数
		支持科学计数法，1.23x109就是1.23e9，或者12.3e8，很大的浮点数必须用科学计数法
	字符串
		'abc'，"xyz"。 r'\t' r标示''里的内容不转义。 多行字符串'''  line1 line2  line3'''
	布尔值
		True、False
	空值
		None
常量用大写表示，但常量其实也是变量，可以修改

字符编码：
	在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8或其他编码。
	ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符
	ord('A') # 65
	chr(66) # 'B'
	 '\u4e2d\u6587' # 等于'中文' 字符的16进制表示形式
	'ABC'.encode('ascii') # b'ABC'
	'中文'.encode('utf-8') # b'\xe4\xb8\xad\xe6\x96\x87'  在bytes中，无法显示为ASCII字符的字节，用\x##显示。
	b'ABC'.decode('ascii') # 字符串以b开头是bytes类型，bytes每个字符存储成一个字节。 
	当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
	#!/usr/bin/env python3
	# -*- coding: utf-8 -*-

格式化：
	 'Hi, %s, you have $%d.' % ('Michael', 1000000) # %?表示有几个参数要格式化，如果只有一个，则不用写括号
	 %d	整数， %f	浮点数， %s	字符串， %x	十六进制整数
	 'Age: %s. Gender: %s' % (25, True) #可以将任意类型用%s
	 '%2d-%02d' % (3, 1) # ' 3-01' 保留两位整数补空格-保留两位整数补0
	 '%.2f' % 3.1415926 保留两位小数。  
	 'growth rate: %d %%' % 7 #要在格式化中输出一个%，使用%%

list和tulpe:
list: 列表
	classmates = ['Michael', 'Bob', 'Tracy'] 
	len(classmates) # 3
	classmates[0] # Michael
	classmates[-1] # Tracy
	classmates.append('Adam') # ['Michael', 'Bob', 'Tracy', 'Adam']
	classmates.insert(1, 'Jack') # ['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']
	classmates.pop() # Adam  ['Michael', 'Jack', 'Bob', 'Tracy']
	classmates.pop(1) #  Michael  ['Michael', 'Bob', 'Tracy']
	L = ['Apple', 123, True] #可以是不同元素
	s = ['python', 'java', ['asp', 'php'], 'scheme'] #元素里面可以是list
	s[2][1] # asp
tuple: 元组
	tuple和list非常类似，但是tuple一旦初始化就不能修改
	classmates = ('Michael', 'Bob', 'Tracy') # 注意是(),  可以使用classmates[0]，但不能修改
	t = (1) # t的值为1，括号代表数学运算的括号，处理优先级的问题
	t = (1,)  # t为一个元素1的元组，一个元素的元组必须加上逗号

判断与循环：
	age = 3
	if age >= 18:
	    print('adult')
	elif age >= 6:
	    print('teenager')
	else:
	    print('kid')

	if x:
	    print('True')  #只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False

	names = ['Michael', 'Bob', 'Tracy']
	for name in names:
	    print(name)

	sum = 0
	for x in range(101): # 0到100的整数序列
	    sum = sum + x
	print(sum)

dict和set:
dict:
	d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
	d['Michael'] #95
	d['Adam'] = 67 #设置值
	d['Thomas']  #key不存在会报错， 有两种办法避免
	'Thomas' in d # 是否存在key, 返回False
	d.get('Thomas') # 返回None, d.get('Thomas', -1)不存在返回默认值-1
	d.pop('Bob') # 对应的key-val删除，返回val
set:
	s = set([1, 2, 3])  
	s # {1, 2, 3}
	s.add(4)
	s.remove(1)
	s2 = set([1, 2, 3])
	s & s2  #交集，  使用|取并集

函数：
	help(abx) #查看abs函数帮助
数据类型转换：
	int('123')
	int(12.23)
	float('12.34')
	str(100)
	bool(1) # True  bool('') False
函数定义：
import math

def move(x, y, step, angle=0): #定义函数
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny #返回多个值，其实返回的是一个tuple,返回一个tuple时，括号可以省略
    # 如果没有return语句则返回None

x, y = move(100, 100, 60, math.pi / 6) #其实返回的是

参数：
	默认参数：
		def enroll(name, gender, age=6, city='Beijing'):
			..
		enroll('Bob', 'M', 7) #按顺序传默认参数
		enroll('Adam', 'M', city='Tianjin') # city参数用传进去的值，其他默认参数继续使用默认值。
		默认参数要使用不变对象
		def add_end(L=[]):
		    L.append('END')
		    return L
		add_end() # ['END']
		add_end() # ['END', 'END']
		Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。
		def add_end(L=None):
		    if L is None:
		        L = []
		    L.append('END')
		    return L
	可变参数：
		def calc(numbers):
		    sum = 0
		    for n in numbers:
		        sum = sum + n * n
		    return sum
		calc([1, 2, 3])  # 传参数的时候要构建一个list或者tuple

		def calc(*numbers):  #可变参数
		    sum = 0
		    for n in numbers:
		        sum = sum + n * n
		    return sum
		 calc(1, 2)   
		 nums = [1, 2, 3]
		 calc(*nums)  #如果已有一个list， 可以用*号转换成可变参数可接收的形式
	关键字参数：
		def person(name, age, **kw):
		    print('name:', name, 'age:', age, 'other:', kw)
		person('Adam', 45, gender='M', job='Engineer') #通过k=v传入关键字参数
		extra = {'city': 'Beijing', 'job': 'Engineer'}
		person('Jack', 24, **extra) #也可以通过**将一个dict转换为关键字参数
	命名关键字参数：
		def person(name, age, *, city, job): #命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。
		    print(name, age, city, job)
		如果要限制关键字参数的名字，就可以用命名关键字参数


高级特性：
=======
切片：
	L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
	L[0:3] # 从索引0开始取，直到索引3为止，但不包括索引3。 等于L[:3]    ['Michael', 'Sarah', 'Tracy']
	L[-2:] # 从导数第二个元素开始到最后一个元素
	L = list(range(100))
	L[:10:2] # [0, 2, 4, 6, 8] 前10个数，每两个取一个
	(0, 1, 2, 3, 4, 5)[:3] # tuple也可以使用切片
	'ABCDEFG'[:3] # 字符串也可以使用切片，没有substring方法

迭代：
	d = {'a': 1, 'b': 2, 'c': 3}
	for key in d: #迭代key
		print(key)
	#for value in d.values()
	#for k, v in d.items()

	for ch in 'ABC':  
		print(ch)

	for i, value in enumerate(['A', 'B', 'C']):  # 使用enumerate可以迭代的同时获取list的索引

	for x, y in [(1, 1), (2, 4), (3, 9)]:  # 双变量

	from collections import Iterable
		isinstance('abc', Iterable)  # 判断是否Iterable，只要是都可以使用for来迭代


列表生成式：
	[x * x for x in range(1, 11) if x % 2 == 0]  # [4, 16, 36, 64, 100]
	[m + n for m in 'ABC' for n in 'XYZ'] # ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
	import os
	[d for d in os.listdir('.')] # os.listdir可以列出文件和目录

生成器：
	要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator
	g = (x * x for x in range(10)) 
	next(g) # 0
	next(g) # 1
	generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。
	for n in g: # 也可以使用for来迭代，实际使用next是很少的
		print(n)

	def odd():
	    print('step 1')
	    yield 1
	    print('step 2')
	    yield(3)
	    print('step 3')
	    yield(5)
	o = odd()
	next(o)
	odd不是普通函数，而是generator，在执行过程中，遇到yield就中断，下次又继续执行。执行3次yield后，已经没有yield可以执行了，所以，第4次调用next(o)就报错。

迭代器：
	可以直接作用于for循环的数据类型有以下几种：
	一类是集合数据类型，如list、tuple、dict、set、str等；
	一类是generator，包括生成器和带yield的generator function。
	凡是可作用于for循环的对象都是Iterable类型；
	凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列
	集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。


函数式编程
========
高阶函数： 把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。
	map/reduce:
		 list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9])) # 两个参数，一个是函数，一个是Iterable.返回Iterator。
		 # reduce的效果： reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
		 from functools import reduce
		 def add(x, y):
		 	return x + y
		 reduce(add, [1, 3, 5, 7, 9]) # 25
	filter:
		def is_odd(n):
			return n % 2 == 1
		list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))  # 结果: [1, 5, 9, 15]
	sorted:
		sorted([36, 5, -12, 9, -21]) 
		sorted([36, 5, -12, 9, -21], key=abs) #　[5, 9, -12, -21, 36]
		sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower) # key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序

返回函数：
	闭包：当一个函数返回了一个函数后，其内部的局部变量还被新函数引用		
	def count():
	    fs = []
	    for i in range(1, 4):
	        def f():
	             return i*i
	        fs.append(f)
	    return fs

	f1, f2, f3 = count()
	f1() # 9    f2() f2()都是9
	返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。
	如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：
	def count():
	    def f(j):
	        def g():
	            return j*j
	        return g
	    fs = []
	    for i in range(1, 4):
	        fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()
	    return fs
    f1, f2, f3 = count()
    f1() # 1
    f2() # 4

匿名函数：
	关键字lambda表示匿名函数，冒号前面的x表示函数参数。匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。
	f = lambda x: x * x 

装饰器：
	import functools
	def log(func):
	    def wrapper(*args, **kw):
	        print('call %s():' % func.__name__)
	        return func(*args, **kw)
	    return wrapper
	@log         # python的@语法，相当于执行了now = log(now)
	def now():
	    print('2015-3-25')
	now()
	输出：call now():
	      2015-3-25

	import functools
	def log(text):
	    def decorator(func):
	    	# @functools.wraps(func)  #加了这句后输出func.__name__是原来的函数名，否则输出wrapper
	        def wrapper(*args, **kw):
	            print('%s %s():' % (text, func.__name__))
	            return func(*args, **kw)
	        return wrapper
	    return decorator
	@log('execute')  # 相当于now = log('execute')(now)
	def now():
	    print('2015-3-25')
	now()
	输出：execute now():
		  2015-3-25

偏函数：
	int('12345', base=8) # base 以8进制的字符串为基础，转换成十进制整数。 如果有大量8进制数要转换，每次输入base优点麻烦
	def int2(x, base=2):    # 调用int2 就不用每次输入base
	    return int(x, base)

	import functools
	int2 = functools.partial(int, base=2) # functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()
	int2('1000000') # 64
	functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。

模块  
=========
	一个.py文件就称之为一个模块（Module）。
	一个abc.py的文件就是一个名字叫abc的模块。为避免模块名冲突，可增加顶层包名，如mycompany
	引入包后，mycompany/abc.py的包名就变成mycompany.abc
	每一个包目录下面都会有一个__init__.py的文件,否则，Python就把这个目录当成普通目录,__init__.py可以有代码也可以没
	__init__.py本身就是一个模块，mycompany/__init__.py的模块名是mycompany

使用模块：
	编写一个hello模块
	#!/usr/bin/env python3
	# -*- coding: utf-8 -*-

	' a test module '  # 任何模块代码的第一个字符串都被视为模块的文档注释

	__author__ = 'Michael Liao'  # 作者

	import sys

	def test():
	    args = sys.argv  # argv至少有一个元素，因为第一个参数永远是该.py文件的名称
	    if len(args)==1:
	            print('Hello, world!')
	    elif len(args)==2:
	        print('Hello, %s!' % args[1])
	    else:
	        print('Too many arguments!')

	# 如果直接运行hello.py，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该hello模块时，if判断将失败
	if __name__=='__main__': 
	    test()	

	__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的__author__，__name__就是特殊变量，hello模块定义的文档注释也可以用特殊变量__doc__访问，我们自己的变量一般不要用这种变量名

	类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等。注意是不应该，不是不能

安装第三方模块：
	使用pip安装第三方模块
	pip install Pillow
	模块搜索路径
	Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块。搜索路径存放在sys模块的path变量中
	如果我们要添加自己的搜索目录，有两种方法：
	1. 一是直接修改sys.path，添加要搜索的目录
		import sys
		sys.path.append('/Users/michael/my_py_scripts')
	2. 设置环境变量PYTHONPATH


面向对象编程
==========

	class Student(object):  # 继承object

		# 构造方法，第一个参数要是self,调用的时候不用传self。
	    def __init__(self, name, score): 
	        self.name = name
	        self.__score = score  # 私有变量，外部不能直接访问。但也有办法，python会把__score映射成_Student__score，不同解析器可能映射的属性不一样，不建议
	        self._age = 15  # 一个下划线是能直接访问，但不建议访问
	        # 变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的

	    # getter setter
		def get_score(self):
	        return self.__score

	    def set_score(self, score):
	            self.__score = score

	    # 除了第一个参数要是self外，与不同函数没区别
	    def print_score(self):  
	        print('%s: %s' % (self.name, self.__score))

	bart = Student('Bart Simpson', 59) # 创建实例
	bart.print_score()

继承：
  	class Animal(object):
  	    def run(self):
  	        print('Animal is running...')

  	class Dog(Animal):
  	    def run(self):
        	print('Dog is running...')

  	class Cat(Animal):
  	    pass

  	def run_twice(animal):  # 多态， 只要传入Animal，或者它的子类. 传入不同的对象可以有不同的表现，子类要覆盖父类的方法
  	    animal.run()
  	    animal.run()
  	# 如果再定义一个新的类Bird继承Animal,就能很好的满足开闭原则。 
  	# 对扩展开放：允许新增Animal子类。 对修改封闭：不需要修改依赖Animal类型的run_twice()等函数。

    run_twice(Cat()) # 在动态语言中，其实并不一定要传入Animal类型的对象，只要传入的对象有run方法就行，
    # duck type 一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。

获取对象信息：
	type(123)==int # 
	type('abc')==str 
	import types
	def fn():
		pass
	type(fn)==types.FunctionType
	type(abs)==types.BuiltinFunctionType
	type(lambda x: x)==types.LambdaType
	type((x for x in range(10)))==types.GeneratorType

	对于class的继承关系来说，使用type()就很不方便。我们要判断class的类型，可以使用isinstance()函数。
	object -> Animal -> Dog -> Husky
	isinstance(h, Animal) # True
	isinstance([1, 2, 3], (list, tuple)) # 判断一个变量是否是某些类型中的一种

	dir('ABC') #获取一个对象的所有属性和方法
	hasattr(obj, 'x') # obj对象是否有x属性
	setattr(obj, 'y', 19) # 设置属性
	getattr(obj, 'y') # 获取属性，如果没有这属性会报错。 可以带默认值作为第三个参数
	只有在不知道对象信息的时候，我们才会去获取对象信息。如果可以直接写：
	sum = obj.x + obj.y  就不要写：  sum = getattr(obj, 'x') + getattr(obj, 'y')

类属性：
	>>> class Student(object):
	...     name = 'Student'
	...
	>>> s = Student() # 创建实例s
	>>> print(s.name) # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性
	Student
	>>> print(Student.name) # 打印类的name属性
	Student
	>>> s.name = 'Michael' # 给实例绑定name属性
	>>> print(s.name) # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性
	Michael
	>>> print(Student.name) # 但是类属性并未消失，用Student.name仍然可以访问
	Student
	>>> del s.name # 如果删除实例的name属性
	>>> print(s.name) # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了
	Student


面向对象高级编程
===========
使用__slots__:
	class Student(object):
	    pass
	s = Student()
	s.name = 'Michael' # 动态给实例绑定一个属性

	def set_age(self, age): # 定义一个函数作为实例方法
		self.age = age
	from types import MethodType
	s.set_age = MethodType(set_age, s) # 给实例绑定一个方法, 其他实例没有
	# Student.set_age = MethodType(set_age, Student) # 给类绑定一个方法
	# 这种动态给类、实例绑定方法在静态语言中很难实现

	class Student(object):
	    __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
	>>> s = Student() # 创建新的实例
	>>> s.name = 'Michael' # 绑定属性'name'
	>>> s.age = 25 # 绑定属性'age'
	>>> s.score = 99 # 报错，slots没有绑定该属性

	# 注意：当子类没有写slots时，父类的slots对子类也不启作用。当子类写了slots后，子类的slots就是自身的+父类的

使用@property:
	class Student(object):
		# 普通的getter setter
		def get_score(self):
			return self._score

		def set_score(self, value):
			if not isinstance(value, int):
				raise ValueError('score must be an integer!')
			if value < 0 or value > 100:
				raise ValueError('score must between 0 ~ 100!')
			self._score = value

		#使用装饰器实现的getter setter, 方法名就是属性名
	    @property
	    def birth(self):
	        return self._birth

	    @birth.setter
	    def birth(self, value):
	        self._birth = value

	    @property
	    def age(self):
	        return 2015 - self._birth	
	# 如果直接使用对象的属性，不能做属性的合法性检查。如果调用getter setter方法又会让代码冗长，不简洁。
	# 使用@property的装饰器可以使用属性的方式，而实际上会调用getter setter方法

多重继承：
	在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。
	为了更好地看出继承关系，我们把Runnable和Flyable改为RunnableMixIn和FlyableMixIn。
	class Dog(Mammal, RunnableMixIn) # 主线继承哺乳动物Mammal，MixIn Runnalbe的功能
		pass

定制类：
	class Student(object):
	    def __init__(self, name):
	        self.name = name
	    def __str__(self):
	        return 'Student object (name=%s)' % self.name
	    __repr__ = __str__ 
	s = Student('zhang san') 
	print(s) # 此时调用的是__str__
	s # 不调用print会打印__repr__方法返回的字符串。通常__str__()返回用户看到的字符串，__repr__()返回程序开发者看到的字符串

	如果一个类想被用于for ... in循环，类似list或tuple那样，就必须实现一个__iter__()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。
	class Fib(object):
	    def __init__(self):
	        self.a, self.b = 0, 1 # 初始化两个计数器a，b

	    def __iter__(self):
	        return self # 实例本身就是迭代对象，故返回自己

	    def __next__(self):
	        self.a, self.b = self.b, self.a + self.b # 计算下一个值
	        if self.a > 100000: # 退出循环的条件
	            raise StopIteration();
	        return self.a # 返回下一个值

	    # 实现了getitem可以像list一样通过索引访问 Fib()[3]  Fib()[1:23]。 以下指示简单的实现step的实现还没加，还有其他实现也没
	    # 如果把对象看成dict，__getitem__()的参数也可能是一个可以作key的object。 __setitem__()方法，把对象视作list或dict来对集合赋值。最后，还有一个__delitem__()方法，用于删除某个元素。
	    def __getitem__(self, n):
            if isinstance(n, int): # n是索引
                a, b = 1, 1
                for x in range(n):
                    a, b = b, a + b
                return a
            if isinstance(n, slice): # n是切片
                start = n.start
                stop = n.stop
                if start is None:
                    start = 0
                a, b = 1, 1
                L = []
                for x in range(stop):
                    if x >= start:
                        L.append(a)
                    a, b = b, a + b
                return L

        # 实现了call方法，就可以直接将实例作为方法来调用。 s = Student()    s()
        # callable(Student())  # 判断一个对象是否可以调用
        def __call__(self):
			print('My name is %s.' % self.name)

	for n in Fib():
		print(n)

	-------------
	很多网站都搞REST API，如果要写SDK，给每个URL对应的API都写一个方法，那得累死，而且，API一旦改动，SDK也要改。利用完全动态的__getattr__，我们可以写出一个链式调用：
	class Chain(object):

	    def __init__(self, path=''):
	        self._path = path

	    def __getattr__(self, path):
	        return Chain('%s/%s' % (self._path, path))

	    def __str__(self):
	        return self._path

	    __repr__ = __str__

	>>> Chain().status.user.timeline.list
	'/status/user/timeline/list'
	这样，无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且，不随API的增加而改变！

	对于url有参数的： /users/:user/repos  可以 Chain().users('michael').repos
	
枚举：
	from enum import Enum
	Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')) #值默认从1开始
	# 遍历枚举
	for name, member in Month.__members__.items():
	    print(name, '=>', member, ',', member.value) # Jan => Month.Jan 1

	from enum import Enum, unique

	@unique
	class Weekday(Enum):
	    Sun = 0 # Sun的value被设定为0
	    Mon = 1
	    Tue = 2
	    Wed = 3
	    Thu = 4
	    Fri = 5
	    Sat = 6

错误、调试、测试：
===========
错误
	import logging
	try:
	    print('try...')
	    r = 10 / int('2')
	    print('result:', r)
	except ValueError as e:
	    print('ValueError:', e)
	except ZeroDivisionError as e:
	    print('ZeroDivisionError:', e)
	    logging.exception(e) # 通过python自带的logging打印异常，配置logging还可以输出到日志文件
	else:
	    print('no error!')
	finally:
	    print('finally...')
	print('END')

	抛出错误：
	# err_raise.py
	# 所有异常都继承BaseException。 自定义FooError
	class FooError(ValueError):
	    pass

	def foo(s):
	    n = int(s)
	    if n==0:
	        raise FooError('invalid value: %s' % s)
	    return 10 / n

	def bar():
	    try:
	        foo('0')
	    except ValueError as e:
	        print('ValueError!')
	        # 将错误原样抛出。由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理
	        raise     
	        # raise ZeroDivisionError('input error!') # 转换成另一个错误抛出

	foo('0')

单元测试：
	mydict.py:
	class Dict(dict):

	    def __init__(self, **kw):
	        super().__init__(**kw)

	    def __getattr__(self, key):
	        try:
	            return self[key]
	        except KeyError:
	            raise AttributeError(r"'Dict' object has no attribute '%s'" % key)

	    def __setattr__(self, key, value):
	        self[key] = value
	----------------------------

	import unittest

	from mydict import Dict

	class TestDict(unittest.TestCase):
		def setUp(self):
        	print('setUp...')

       	def tearDown(self):
        	print('tearDown...')

        # 测试方法要以test开头
	    def test_init(self):
	        d = Dict(a=1, b='test')
	        self.assertEqual(d.a, 1)
	        self.assertEqual(d.b, 'test')
	        self.assertTrue(isinstance(d, dict))

	    def test_key(self):
	        d = Dict()
	        d['key'] = 'value'
	        self.assertEqual(d.key, 'value')

	    def test_attr(self):
	        d = Dict()
	        d.key = 'value'
	        self.assertTrue('key' in d)
	        self.assertEqual(d['key'], 'value')

	    def test_keyerror(self):
	        d = Dict()
	        with self.assertRaises(KeyError):
	            value = d['empty']

	    def test_attrerror(self):
	        d = Dict()
	        with self.assertRaises(AttributeError):
	            value = d.empty

	if __name__ == '__main__':
	    unittest.main()

	第一种运行方式，if__name__='main'; 然后像普通python代码一样运行python3 mydict_test.py
	第二种：python3 -m unittest mydict_test

IO编程
===========
文件读写：
	try:
		# r只读  rb 二进制只读  w 写  wb 二进制写
	    f = open('/path/to/file', 'r') #如果文件不存在会报错
	    # f = open('/Users/michael/gbk.txt', 'r', encoding='gbk') # 指定字符编码，默认是utf-8
	    print(f.read()) # 一次将文件读入内存，返回一个字符串. 对于大的文件应该仿佛调用read(size)
	    # f.readline # 每次读取一行。 readlines() 返回list
	finally:
	    if f:
	        f.close() 
	上面try..finnally的方式太繁琐，可以使用with
	with open('/path/to/file', 'r') as f:
	    print(f.read())

	f = open('/Users/michael/test.txt', 'w')
	f.write('Hello, world!') # 并不是马上写，缓存起来，系统空闲的时候才写。所以最后一定要调用close保证数据写完
	f.close()

StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口。
	from io import StringIO
	f = StringIO()
	f.write('hello')
	f.write('world!')
	print(f.getvalue()) # getvalue获得写入后的str。也可以使用readline

	from io import BytesIO
	f = BytesIO()
	f.write('中文'.encode('utf-8'))
	print(f.getvalue()) # b'\xe4\xb8\xad\xe6\x96\x87'

	f = BytesIO(b'\xe4\xb8\xad\xe6\x96\x87')
	f.read()  # b'\xe4\xb8\xad\xe6\x96\x87'

操作文件和目录：
	import os
	os.name # 操作系统类型
	os.uname() #详细的系统信息
	os.environ　#环境变量。os.environ.get('PATH')

	# 查看当前目录的绝对路径:
	>>> os.path.abspath('.')
	'/Users/michael'
	# 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:
	>>> os.path.join('/Users/michael', 'testdir')
	'/Users/michael/testdir'
	# 然后创建一个目录:
	>>> os.mkdir('/Users/michael/testdir')
	# 删掉一个目录:
	>>> os.rmdir('/Users/michael/testdir')

	>>> os.path.split('/Users/michael/testdir/file.txt')
	('/Users/michael/testdir', 'file.txt')
	>>> os.path.splitext('/path/to/file.txt')
	('/path/to/file', '.txt')

	# 对文件重命名:
	>>> os.rename('test.txt', 'test.py')
	# 删掉文件:
	>>> os.remove('test.py')
	# os没有复制文件的方法，原因是复制文件并非由操作系统提供的系统调用。shutil模块提供了copyfile()的函数

	# 列出所有的.py文件
	>>> [x for x in os.listdir('.') if os.path.isfile(x) and os.path.splitext(x)[1]=='.py']
	['apis.py', 'config.py', 'models.py', 'pymonitor.py', 'test_db.py', 'urls.py', 'wsgiapp.py']

序列化：
	把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling。Python提供了pickle模块来实现序列化
	>>> import pickle
	>>> d = dict(name='Bob', age=20, score=88)
	>>> pickle.dumps(d)
	b'\x80\x03}q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00scoreq\x02KXX\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00Bobq\x04u.'
	pickle.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件。或者用另一个方法pickle.dump()写入file
	>>> f = open('dump.txt', 'wb')
	>>> pickle.dump(d, f)
	>>> f.close()
	当我们要把对象从磁盘读到内存时，可以先把内容读到一个bytes，然后用pickle.loads()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象。
	>>> f = open('dump.txt', 'rb')
	>>> d = pickle.load(f)
	>>> f.close()
	>>> d
	{'age': 20, 'score': 88, 'name': 'Bob'}

json:
	>>> import json
	>>> d = dict(name='Bob', age=20, score=88)
	>>> json.dumps(d) # 返回一个str
	'{"age": 20, "score": 88, "name": "Bob"}'
	>>> json_str = '{"age": 20, "score": 88, "name": "Bob"}'
	>>> json.loads(json_str)
	{'age': 20, 'score': 88, 'name': 'Bob'}
	json模块提供json与dict的转换，如果要class与json的转换

	import json

	class Student(object):
	    def __init__(self, name, age, score):
	        self.name = name
	        self.age = age
	        self.score = score

	s = Student('Bob', 20, 88)
	print(json.dumps(s))  
	# TypeError, 因为Student不是一个可序列化的JSON对象，要定义student与dict的转换函数才能转换

	def student2dict(std):
	    return {
	        'name': std.name,
	        'age': std.age,
	        'score': std.score
	    }
	>> print(json.dumps(s, default=student2dict)) # 通过default参数指定转换dict的函数
	>> print(json.dumps(s, default=lambda obj: obj.__dict__)) # 偷懒写法，__dict__保存实例变量的dict

	def dict2student(d):
	    return Student(d['name'], d['age'], d['score'])
	>>> json_str = '{"age": 20, "score": 88, "name": "Bob"}'
	>>> print(json.loads(json_str, object_hook=dict2student)) # object_hook

进程与线程
==========
多进程：
fork:
	import os

	print('Process (%s) start...' % os.getpid())
	# Only works on Unix/Linux/Mac: windows不能fork
	pid = os.fork()
	if pid == 0:   # 子进程pid等于0
	    print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))
	else:
	    print('I (%s) just created a child process (%s).' % (os.getpid(), pid))

multiprocessing: 
	windows无法使用fork,但是multiprocessing在windows上模拟了fork的行为
	from multiprocessing import Process
	import os

	# 子进程要执行的代码
	def run_proc(name):
	    print('Run child process %s (%s)...' % (name, os.getpid()))

	if __name__=='__main__':
	    print('Parent process %s.' % os.getpid())
	    p = Process(target=run_proc, args=('test',))
	    print('Child process will start.')
	    p.start()
	    p.join()   # 等待p执行完
	    print('Child process end.')

Pool：
	from multiprocessing import Pool
	import os, time, random

	def long_time_task(name):
	    print('Run task %s (%s)...' % (name, os.getpid()))
	    start = time.time()
	    time.sleep(random.random() * 3)
	    end = time.time()
	    print('Task %s runs %0.2f seconds.' % (name, (end - start)))

	if __name__=='__main__':
	    print('Parent process %s.' % os.getpid())
	    p = Pool(4)
	    for i in range(5):
	        p.apply_async(long_time_task, args=(i,))
	    print('Waiting for all subprocesses done...')
	    p.close()
	    p.join()
	    print('All subprocesses done.')

	执行结果：因为Pool(4)，先执行0,1,2,3。 等2结束了，4才开始。 要想5个一起执行则要Pool(5)
	Parent process 669.
	Waiting for all subprocesses done...
	Run task 0 (671)...
	Run task 1 (672)...
	Run task 2 (673)...
	Run task 3 (674)...
	Task 2 runs 0.14 seconds.
	Run task 4 (673)...
	Task 1 runs 0.27 seconds.
	Task 3 runs 0.86 seconds.
	Task 0 runs 1.41 seconds.
	Task 4 runs 1.91 seconds.
	All subprocesses done.
	由于Pool的默认大小是CPU的核数，如果你不幸拥有8核CPU，你要提交至少9个子进程才能看到上面的等待效果。

子进程：子进程并不是自身，而是一个外部进程。
subprocess：
	import subprocess

	print('$ nslookup www.python.org')
	r = subprocess.call(['nslookup', 'www.python.org'])
	print('Exit code:', r)

如果子进程还需要输入，则可以通过communicate()方法输入：
	import subprocess

	print('$ nslookup')
	p = subprocess.Popen(['nslookup'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	output, err = p.communicate(b'set q=mx\npython.org\nexit\n')
	print(output.decode('utf-8'))
	print('Exit code:', p.returncode)

进程间通信：
	from multiprocessing import Process, Queue
	import os, time, random

	# 写数据进程执行的代码:
	def write(q):
	    print('Process to write: %s' % os.getpid())
	    for value in ['A', 'B', 'C']:
	        print('Put %s to queue...' % value)
	        q.put(value)
	        time.sleep(random.random())

	# 读数据进程执行的代码:
	def read(q):
	    print('Process to read: %s' % os.getpid())
	    while True:
	        value = q.get(True)
	        print('Get %s from queue.' % value)

	if __name__=='__main__':
	    # 父进程创建Queue，并传给各个子进程：
	    q = Queue()
	    pw = Process(target=write, args=(q,))
	    pr = Process(target=read, args=(q,))
	    # 启动子进程pw，写入:
	    pw.start()
	    # 启动子进程pr，读取:
	    pr.start()
	    # 等待pw结束:
	    pw.join()
	    # pr进程里是死循环，无法等待其结束，只能强行终止:
	    pr.terminate()
	    # 进程间通信是通过Queue、Pipes等实现的。

多线程：
	Python的标准库提供了两个模块：_thread和threading，_thread是低级模块，threading是高级模块，对_thread进行了封装。
	import time, threading

	# 假定这是你的银行存款:
	balance = 0
	lock = threading.Lock()

	def change_it(n):
	    # 先存后取，结果应该为0:
	    global balance
	    balance = balance + n
	    balance = balance - n

	def run_thread(n):
	    for i in range(100000):
	    	# 先要获取锁:
	        lock.acquire()
	        try:
	            # 放心地改吧:
	            change_it(n)
	        finally:
	            # 改完了一定要释放锁:
	            lock.release()

	t1 = threading.Thread(target=run_thread, args=(5,))
	t2 = threading.Thread(target=run_thread, args=(8,))
	t1.start()
	t2.start()
	t1.join()
	t2.join()
	print(balance)

	------------------------
	import threading, multiprocessing

	def loop():
	    x = 0
	    while True:
	        x = x ^ 1

	for i in range(multiprocessing.cpu_count()):
	    t = threading.Thread(target=loop)
	    t.start()
	启动与CPU核心数量相同的N个线程，在4核CPU上可以监控到CPU占用率仅有102%，也就是仅使用了一核。
	但是用C、C++或Java来改写相同的死循环，直接可以把全部核心跑满，4核就跑到400%
	解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。
	多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。
	GIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。
	Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。

正则表达式：
================
	>>> import re
	>>> re.match(r'^\d{3}\-\d{3,8}$', '010-12345')
	<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
	>>> re.match(r'^\d{3}\-\d{3,8}$', '010 12345')
	match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。

	test = '用户输入的字符串'
	if re.match(r'正则表达式', test):
	    print('ok')
	else:
	    print('failed')

	>>> re.split(r'[\s\,]+', 'a,b, c  d')
	['a', 'b', 'c', 'd']

	>>> re.match(r'^(\d+)(0*)$', '102300').groups()
	('102300', '')
	# 非贪婪
	>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
	('1023', '00')

	如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式
	# 编译:
	>>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
	# 使用：
	>>> re_telephone.match('010-12345').groups()
	('010', '12345')


常用内建模块
=============
datetime:
	from datetime import datetime, timedelta

	now = datetime.now() # 获取当前datetime
	print(now) # 2015-05-18 16:28:07.198690
	print(type(now)) # <class 'datetime.datetime'>

	dt = datetime(2015, 4, 19, 12, 20) # 用指定日期时间创建datetime

	dt.timestamp() # 把timestamp转换为datetime, 从1970-1-1到现在的毫秒数
	t = 1429417200.0
	print(datetime.fromtimestamp(t)) # timestamp转换为datetime 本地时间
	print(datetime.utcfromtimestamp(t)) # UTC时间 

	cday = datetime.strptime('2015-6-1 18:19:59', '%Y-%m-%d %H:%M:%S') # str -> datetime
	print(datetime.now().strftime('%a, %b %d %H:%M')) # datetime -> str

	now + timedelta(hours=10)
	now - timedelta(days=1)
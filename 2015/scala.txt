val two = 1 + 1 // val常量
var name = "steve" // var变量
def addOne(m: Int): Int = m + 1 # 函数，也可以不指定返回类型def addOne(m: Int) = m + 1
(x: Int) => x + 1 // 匿名函数
// res2: (Int) => Int = <function1>  # 在repl中可通过res2来调用匿名函数 res2(1)
// 定义多行函数，使用{}, 对于任意代码块可以加{}来格式化，使之易读
def timesTwo(i: Int): Int = {
     println("hello")
     i * 2
}

// 部分应用函数
def adder(m: Int, n: Int) = m + n
val add2 = adder(2, _:Int) 
add2(3) #调用部分应用函数，返回5

// 柯里化函数
def multiply(m: Int)(n: Int): Int = m * n  // multiply(3)(2)
val timesTwo = multiply(2) _ // 柯里化也可以部分应用
timesTwo(3)
val adder2 = (adder _).curried  // 将函数柯里化，原本adder(1,2)，变成adder2(1)(2)

// 可变长度参数  *
def capitalizeAll(args: String*) = { 
  args.map { arg =>
    arg.capitalize
  }
}
scala> capitalizeAll("rarity", "applejack")

// 类
class Calculator(brand: String) { // 
	// 构造方法，并不是一个方法，类方法意外的代码都算构造方法
	val color: String = if (brand == "TI") {
		"blue"
	} else if (brand == "HP") {
		"black"
	} else {
		"white"
	}

	var age = 10
	val sex = "mail"

    // val brand: String = "HP"
    def add(m: Int, n: Int): Int = m + n //方法与函数的区别，方法能访问类中的变量
    def say() = println(brand)
    val fun1 = { () => println(1) } // {} 代码块返回的一个匿名函数,所以调用这个无参函数要加括号
}

val cal = new Calculator("other")
cal.brand # 不能直接访问，可以通过say访问，其他变量，常量color, age, sex可以直接访问
cal.say  # 调用无参数方法，不用加括号
cal.fun1 # 此时执行返回一个函数，要调用需要cal.fun1()

// 继承
class ScientificCalculator(brand: String) extends Calculator(brand) {
  // 如果子类行为与父类没区别，即没有override,应该使用类型别名Type
  def log(m: Double, base: Double) = math.log(m) / math.log(base)
}

// 抽象类(abstract class) 与 特质(trait)
abstract class Shape {
    def getArea():Int    
}

class Circle(r: Int) extends Shape {
	def getArea():Int = { r * r * 3 }
}

val c = new Circle(2)

// --------------

trait Car {
  val brand: String
}

trait Shiny {
  val shineRefraction: Int
}

class BMW extends Car {
  val brand = "BMW"
}

class BMW extends Car with Shiny {
  val brand = "BMW"
  val shineRefraction = 12
}

// >> 优先使用特质。一个类扩展多个特质是很方便的，但却只能扩展一个抽象类。
// >> 如果你需要构造函数参数，使用抽象类。因为抽象类可以定义带参数的构造函数，而特质不行。

// 泛型
trait Cache[K, V] {  //通过[]引入泛型
  def get(key: K): V
  def put(key: K, value: V)
  def delete(key: K)
}

// 也支持在方法引入泛型
def remove[K](key: K)

// 单例对象 object 与 apply方法
object Timer {
  var count = 0

  def apply() = println("apply") // 注意，apply后面必须加(). Timer()调用apply
  def currentCount(): Long = {
    count += 1
    count
  }
}

Timer.currentCount() // 使用单例对象，不需要new
Timer() // 调用apply方法

class Bar {
	def apply() = 0
}

// 调用类中的apply, 与object是不同的, 相同的是都要通过对象加()来调用 
val bar = new Bar()
bar() 

// 单例对象可以和类具有相同的名称, 此时对象称为伴生对象，通常用于工厂使用
class Bar(foo: String)

object Bar {
  def apply(foo: String) = new Bar(foo)
}

// 函数即对象，一个参数的函数其实是继承Function1的对象，两个参数对应Function2,支持从0到22
// 所以定义def addOne(m:Int): Int = m + 1 ，相当于下面
object addOne extends Function1[Int, Int] { // [Int, Int] 最后一个Int是返回值
	def apply(m: Int): Int = m + 1
}
addOne(1)

class AddOne extends Function1[Int, Int] {
   def apply(m: Int): Int = m + 1
}

val addOne = new AddOne()
addOne(1)

// 可以使用更直观快捷的extends (Int => Int)代替extends Function1[Int, Int]
// 注意：类中定义的方法并不是Function*的实例，在repl定义的方法才是

// 模式匹配
val times = 1

times match {
  case 1 => "one"
  case 2 => "two"
  case _ => "some other number"
}

// 使用case if判断
times match {
  case i if i == 1 => "one"
  case i if i == 2 => "two"
  case _ => "some other number" 
}

// case不同类型的数据，配合match
def bigger(o: Any): Any = {
  o match {
    case i: Int if i < 0 => i - 1
    case i: Int => i + 1
    case d: Double if d < 0.0 => d - 0.1
    case d: Double => d + 0.1
    case text: String => text + "s"
  }
}

// case class， 可用于case的类
case class Calculator(brand: String, model: String)
val hp20b = Calculator("hp", "20B")
val hp20b2 = Calculator("hp", "20B")
hp20b == hp20b2

def calcType(calc: Calculator) = calc match {
  case Calculator("hp", "20B") => "financial"
  case Calculator("hp", "48G") => "scientific"
  case Calculator("hp", "30B") => "business"
  case Calculator(ourBrand, ourModel) => "Calculator: %s %s is of unknown type".format(ourBrand, ourModel)
  // 最后一句也可以case Calculator(_, _) => "Calculator of unknown type"
}
calcType(hp20b)

// 异常
val result: Int = try {
  remoteCalculatorService.add(1, 2)
} catch {
  case e: ServerIsDownException => {
    log.error(e, "the remote calculator service is unavailable. should have kept your trusty HP.")
    0
  }
} finally {
  remoteCalculatorService.close()
}
// try catch块是和if一样，是面向表达式的，即可以写在赋值语句右边


//  ---------------- 集合 -----------
// list 
val numbers = List(1, 2, 3, 4) // 不需要new
val number2 = 1 :: 2 :: 3 :: 4 :: Nil //也可以这样创建List,最后一个要为Nil
Set(1, 1, 2) 
// Tuple
val hostPort = ("localhost", 80) 
hostPort._1 // 访问tuple元素，是从1开始的
hostPort._2
hostPort match {
  case ("localhost", 80) => println(80)
  case ("localhost", 12) => println(12)
}
建两个元素的元组时，可以使用特殊语法：->
val a = 1 -> 2

// map  map其实是一个list,存放的是元组tuple
val map = Map(1 -> 2) 
val map2 = Map("foo" -> "bar", "hello" -> "world")
map2.get("foo") //返回Some(bar), 没有对应的key则返回None

// option 有子类Some[T]和None
trait Option[T] {
  def isDefined: Boolean // Some返回true
  def get: T     // Some有值返回,None报错
  def getOrElse(t: T): T // t是默认值
}
// Option可在case使用
val result = res1 match {
  case Some(n) => n * 2
  case None => 0
}

// -------------- 函数组合子（Functional Combinators） --------------
val numbers = List(1,2,3,4,5,6,7,8,9,10)
// map对列表中的每个元素应用一个函数，返回应用后的元素所组成的列表。
numbers.map((i: Int) => i * 2) // 传入一个函数
numbers.map(_ * 2)  //当函数只有一个参数的时候，可以使用_来简化
// foreach很像map，但没有返回值。foreach仅用于有副作用[side-effects]的函数。
numbers.foreach((i: Int) => i * 2)
// filter移除任何对传入函数计算结果为false的元素
numbers.filter((i: Int) => i % 2 == 0) // 同样可以写成 numbers.filter(_ % 2 == 0)
// zip将两个列表的内容聚合到一个对偶列表中。
scala> List(1, 2, 3).zip(List("a", "b", "c"))
res0: List[(Int, String)] = List((1,a), (2,b), (3,c))
// partition
scala> numbers.partition(_ % 2 == 0)
res0: (List[Int], List[Int]) = (List(2, 4, 6, 8, 10),List(1, 3, 5, 7, 9))
// find返回集合中第一个匹配谓词函数的元素。
numbers.find((i: Int) => i > 5) // Some(6)
numbers.drop(5) // 删除前5个元素
numbers.dropWhile(_ % 2 != 0) //List(2, 3, 4, 5, 6, 7, 8, 9, 10)
// foldLeft 0为初始值（记住numbers是List[Int]类型），m作为一个累加器。
numbers.foldLeft(0)((m: Int, n: Int) => m + n) 
scala> numbers.foldLeft(0) { (m: Int, n: Int) => println("m: " + m + " n: " + n); m + n }
m: 0 n: 1
m: 1 n: 2
m: 3 n: 3
m: 6 n: 4
m: 10 n: 5
m: 15 n: 6
m: 21 n: 7
m: 28 n: 8
m: 36 n: 9
m: 45 n: 10
res0: Int = 55
// foldRight 和foldLeft一样，只是运行过程相反。 从List的最后一个元素开始
// flatten
scala> List(List(1, 2), List(3, 4)).flatten
res0: List[Int] = List(1, 2, 3, 4)
// flatMap是一种常用的组合子，结合映射[mapping]和扁平化[flattening]。 flatMap需要一个处理嵌套列表的函数，然后将结果串连起来。
scala> val nestedNumbers = List(List(1, 2), List(3, 4))
nestedNumbers: List[List[Int]] = List(List(1, 2), List(3, 4))

scala> nestedNumbers.flatMap(x => x.map(_ * 2))
res0: List[Int] = List(2, 4, 6, 8)

// 可以把它看做是“先映射后扁平化”的快捷操作：
scala> nestedNumbers.map((x: List[Int]) => x.map(_ * 2)).flatten
res1: List[Int] = List(2, 4, 6, 8)

// 上面的每个组合子都可以通过fold来实现
// Map可以使用所有组合子

// --------------
// 函数组合
// compose 组合其他函数形成一个新的函数 f(g(x))
val fComposeG = f _ compose g _  // 
// andThen 和 compose很像，但是调用顺序是先调用第一个函数，然后调用第二个，即g(f(x))
val fAndThenG = f _ andThen g _

case语句其实是PartialFunction的函数的子类
val one: PartialFunction[Int, String] = { case 1 => "one" }
one.isDefinedAt(1) // true
val two: PartialFunction[Int, String] = { case 2 => "two" }
val wildcard: PartialFunction[Int, String] = { case _ => "something else" }
val partial = one orElse two orElse three orElse wildcard //orElse组合多个PartialFunction
partial(5)


case class PhoneExt(name: String, ext: Int)
val extensions = List(PhoneExt("steve", 100), PhoneExt("robey", 200))
// 这就是为什么能在filter使用case的原因，因为本质是PartialFunction，也就是Function
extensions.filter { case PhoneExt(name, extension) => extension < 200 }



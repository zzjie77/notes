val two = 1 + 1 // val常量
var name = "steve" // var变量
def addOne(m: Int): Int = m + 1 # 函数，也可以不指定返回类型def addOne(m: Int) = m + 1
(x: Int) => x + 1 // 匿名函数
// res2: (Int) => Int = <function1>  # 在repl中可通过res2来调用匿名函数 res2(1)
// 定义多行函数，使用{}, 对于任意代码块可以加{}来格式化，使之易读
def timesTwo(i: Int): Int = {
     println("hello")
     i * 2
}

// 部分应用函数
def adder(m: Int, n: Int) = m + n
val add2 = adder(2, _:Int) 
add2(3) #调用部分应用函数，返回5

// 柯里化函数
def multiply(m: Int)(n: Int): Int = m * n  // multiply(3)(2)
val timesTwo = multiply(2) _ // 柯里化也可以部分应用
timesTwo(3)
val adder2 = (adder _).curried  // 将函数柯里化，原本adder(1,2)，变成adder2(1)(2)

// 可变长度参数  *
def capitalizeAll(args: String*) = { 
  args.map { arg =>
    arg.capitalize
  }
}
scala> capitalizeAll("rarity", "applejack")

// 类
class Calculator(brand: String) { // 
  // 构造方法，并不是一个方法，类方法意外的代码都算构造方法
  val color: String = if (brand == "TI") {
    "blue"
  } else if (brand == "HP") {
    "black"
  } else {
    "white"
  }

  var age = 10
  val sex = "mail"

    // val brand: String = "HP"
    def add(m: Int, n: Int): Int = m + n //方法与函数的区别，方法能访问类中的变量
    def say() = println(brand)
    val fun1 = { () => println(1) } // {} 代码块返回的一个匿名函数,所以调用这个无参函数要加括号
}

val cal = new Calculator("other")
cal.brand # 不能直接访问，可以通过say访问，其他变量，常量color, age, sex可以直接访问
cal.say  # 调用无参数方法，不用加括号
cal.fun1 # 此时执行返回一个函数，要调用需要cal.fun1()

// 继承
class ScientificCalculator(brand: String) extends Calculator(brand) {
  // 如果子类行为与父类没区别，即没有override,应该使用类型别名Type
  def log(m: Double, base: Double) = math.log(m) / math.log(base)
}

// 抽象类(abstract class) 与 特质(trait)
abstract class Shape {
    def getArea():Int    
}

class Circle(r: Int) extends Shape {
  def getArea():Int = { r * r * 3 }
}

val c = new Circle(2)

// --------------

trait Car {
  val brand: String
}

trait Shiny {
  val shineRefraction: Int
}

class BMW extends Car {
  val brand = "BMW"
}

class BMW extends Car with Shiny {
  val brand = "BMW"
  val shineRefraction = 12
}

// >> 优先使用特质。一个类扩展多个特质是很方便的，但却只能扩展一个抽象类。
// >> 如果你需要构造函数参数，使用抽象类。因为抽象类可以定义带参数的构造函数，而特质不行。

// 泛型
trait Cache[K, V] {  //通过[]引入泛型
  def get(key: K): V
  def put(key: K, value: V)
  def delete(key: K)
}

// 也支持在方法引入泛型
def remove[K](key: K)

// 单例对象 object 与 apply方法
object Timer {
  var count = 0

  def apply() = println("apply") // 注意，apply后面必须加(). Timer()调用apply
  def currentCount(): Long = {
    count += 1
    count
  }
}

Timer.currentCount() // 使用单例对象，不需要new
Timer() // 调用apply方法

class Bar {
  def apply() = 0
}

// 调用类中的apply, 与object是不同的, 相同的是都要通过对象加()来调用 
val bar = new Bar()
bar() 

// 单例对象可以和类具有相同的名称, 此时对象称为伴生对象，通常用于工厂使用
class Bar(foo: String)

object Bar {
  def apply(foo: String) = new Bar(foo)
}

// 函数即对象，一个参数的函数其实是继承Function1的对象，两个参数对应Function2,支持从0到22
// 所以定义def addOne(m:Int): Int = m + 1 ，相当于下面
object addOne extends Function1[Int, Int] { // [Int, Int] 最后一个Int是返回值
  def apply(m: Int): Int = m + 1
}
addOne(1)

class AddOne extends Function1[Int, Int] {
   def apply(m: Int): Int = m + 1
}

val addOne = new AddOne()
addOne(1)

// 可以使用更直观快捷的extends (Int => Int)代替extends Function1[Int, Int]
// 注意：类中定义的方法并不是Function*的实例，在repl定义的方法才是

// 模式匹配
val times = 1

times match {
  case 1 => "one"
  case 2 => "two"
  case _ => "some other number"
}

// 使用case if判断
times match {
  case i if i == 1 => "one"
  case i if i == 2 => "two"
  case _ => "some other number" 
}

// case不同类型的数据，配合match
def bigger(o: Any): Any = {
  o match {
    case i: Int if i < 0 => i - 1
    case i: Int => i + 1
    case d: Double if d < 0.0 => d - 0.1
    case d: Double => d + 0.1
    case text: String => text + "s"
  }
}

// case class， 可用于case的类
case class Calculator(brand: String, model: String)
val hp20b = Calculator("hp", "20B")
val hp20b2 = Calculator("hp", "20B")
hp20b == hp20b2

def calcType(calc: Calculator) = calc match {
  case Calculator("hp", "20B") => "financial"
  case Calculator("hp", "48G") => "scientific"
  case Calculator("hp", "30B") => "business"
  case Calculator(ourBrand, ourModel) => "Calculator: %s %s is of unknown type".format(ourBrand, ourModel)
  // 最后一句也可以case Calculator(_, _) => "Calculator of unknown type"
}
calcType(hp20b)

abstract class Person
case class Student(age: Int) extends Person //age默认是val, case class和caseobject默认是不能修改的
case class Worker(age: Int, salary: Double) extends Person
case object Shared extends Person

val worker = Worker(29, 10000)
val worker2 = worker.copy(salary = 7812.5) 

def caseOps(person: Person) = person match {
  case Student(age) => println("I am " + age + " years old")
  case Worker(_, salary) => println("I got " + salary)
  case Shared => println("No property")
}
caseOps(Student(19))
caseOps(Shared)

// 异常
val result: Int = try {
  remoteCalculatorService.add(1, 2)
} catch {
  case e: ServerIsDownException => {
    log.error(e, "the remote calculator service is unavailable. should have kept your trusty HP.")
    0
  }
} finally {
  remoteCalculatorService.close()
}
// try catch块是和if一样，是面向表达式的，即可以写在赋值语句右边


//  ---------------- 集合 -----------
// list 
val numbers = List(1, 2, 3, 4) // 不需要new .   numbers(1)获取元素
val number2 = 1 :: 2 :: 3 :: 4 :: Nil //也可以这样创建List,最后一个要为Nil
Set(1, 1, 2) 
// Tuple
val hostPort = ("localhost", 80) 
hostPort._1 // 访问tuple元素，是从1开始的
hostPort._2
hostPort match {
  case ("localhost", 80) => println(80)
  case ("localhost", 12) => println(12)
  case _ => println("other")
}
建两个元素的元组时，可以使用特殊语法：->
val a = 1 -> 2

// map  map其实是一个list,存放的是元组tuple
val map = Map(1 -> 2) 
val map2 = Map("foo" -> "bar", "hello" -> "world")
map2.get("foo") //返回Some(bar), 没有对应的key则返回None。 map2.get("foo").get 最后不加括号

// option 有子类Some[T]和None
trait Option[T] {
  def isDefined: Boolean // Some返回true
  def get: T     // Some有值返回,None报错
  def getOrElse(t: T): T // t是默认值
}
// Option可在case使用
val result = res1 match {
  case Some(n) => n * 2
  case None => 0
}

// -------------- 函数组合子（Functional Combinators） --------------
val numbers = List(1,2,3,4,5,6,7,8,9,10)
// map对列表中的每个元素应用一个函数，返回应用后的元素所组成的列表。
numbers.map((i: Int) => i * 2) // 传入一个函数
numbers.map(_ * 2)  //当函数只有一个参数的时候，可以使用_来简化
// foreach很像map，但没有返回值。foreach仅用于有副作用[side-effects]的函数。
numbers.foreach((i: Int) => i * 2)
// filter移除任何对传入函数计算结果为false的元素
numbers.filter((i: Int) => i % 2 == 0) // 同样可以写成 numbers.filter(_ % 2 == 0)
// zip将两个列表的内容聚合到一个对偶列表中。
scala> List(1, 2, 3).zip(List("a", "b", "c"))
res0: List[(Int, String)] = List((1,a), (2,b), (3,c))
// partition 返回tuple
scala> numbers.partition(_ % 2 == 0)
res0: (List[Int], List[Int]) = (List(2, 4, 6, 8, 10),List(1, 3, 5, 7, 9))
// find返回集合中第一个匹配谓词函数的元素。
numbers.find((i: Int) => i > 5) // Some(6).get
numbers.drop(5) // 返回一个删除前5个元素的新集合
numbers.dropWhile(_ % 2 != 0) //List(2, 3, 4, 5, 6, 7, 8, 9, 10)
// foldLeft 0为初始值（记住numbers是List[Int]类型），m作为一个累加器。
numbers.foldLeft(0)((m: Int, n: Int) => m + n) 
scala> numbers.foldLeft(0) { (m: Int, n: Int) => println("m: " + m + " n: " + n); m + n }
m: 0 n: 1
m: 1 n: 2
m: 3 n: 3
m: 6 n: 4
m: 10 n: 5
m: 15 n: 6
m: 21 n: 7
m: 28 n: 8
m: 36 n: 9
m: 45 n: 10
res0: Int = 55
// foldRight 和foldLeft一样，只是运行过程相反。 从List的最后一个元素开始
// flatten
scala> List(List(1, 2), List(3, 4)).flatten
res0: List[Int] = List(1, 2, 3, 4)
// flatMap是一种常用的组合子，结合映射[mapping]和扁平化[flattening]。 flatMap需要一个处理嵌套列表的函数，然后将结果串连起来。
scala> val nestedNumbers = List(List(1, 2), List(3, 4))
nestedNumbers: List[List[Int]] = List(List(1, 2), List(3, 4))

scala> nestedNumbers.flatMap(x => x.map(_ * 2))
res0: List[Int] = List(2, 4, 6, 8)

// 可以把它看做是“先映射后扁平化”的快捷操作：
scala> nestedNumbers.map((x: List[Int]) => x.map(_ * 2)).flatten
res1: List[Int] = List(2, 4, 6, 8)

// 上面的每个组合子都可以通过fold来实现
// Map可以使用所有组合子

// --------------
// 函数组合
// compose 组合其他函数形成一个新的函数 f(g(x))
val fComposeG = f _ compose g _  // 
// andThen 和 compose很像，但是调用顺序是先调用第一个函数，然后调用第二个，即g(f(x))
val fAndThenG = f _ andThen g _

case语句其实是PartialFunction的函数的子类
val one: PartialFunction[Int, String] = { case 1 => "one" }
one.isDefinedAt(1) // true
val two: PartialFunction[Int, String] = { case 2 => "two" }
val wildcard: PartialFunction[Int, String] = { case _ => "something else" }
val partial = one orElse two orElse three orElse wildcard //orElse组合多个PartialFunction
partial(5) 


case class PhoneExt(name: String, ext: Int)
val extensions = List(PhoneExt("steve", 100), PhoneExt("robey", 200))
// 这就是为什么能在filter使用case的原因，因为本质是PartialFunction，也就是Function
extensions.filter { case PhoneExt(name, extension) => extension < 200 }


======
枚举（for表达式）
  for(i <- e) E(i)
  // for表达式报错发生器（i <- e）同函数体E(i),e可以是各种集合，列，表达式，或者有上下界的数值范围:
  // 1 to 4 (1 <= i <=4);   1 until 4 (1 <= i < 4)(不包含上届) 
  for(i <- 1 to 4) println("No." + i)

  嵌套枚举
  for(i <- e1) for(j <- e2) E(i,j)  // 多于一行可以用花括号括起来
  for(i <- e1; j <- e2) E(i,j) // 简便写法，只用写一个for
  for(i <- e1; if A; j <- e2; if B) E(i,j) // 第一个for循环会判断条件A才执行，第二个会判断条件B

  枚举返回值yield
  > val No=for(i <- 1 to 4) yield i
  No为Vector(1,2,3,4)


匹配（match表达式）
  val sign = a match { // 返回多种类型时，不能执行类型推断，返回Any类型
    case e1 => 123
    case e2 => 'H'
    case _ => "else" 
  }

异常处理
  throw new IllegalArgumentException
  try {} catch {case ... ; case ...} finally {}

输入输出
  println("hello")
  val name=readLine("your name: \n") // Console.readLine，Console默认导入可以省略
  val age=readInt()

  val writer = new PrintWriter(new File("c:/test.txt"))
  for(i <- 1 to 100) writer.println(i)
  writer.close()

其他语句
  函数默认返回最后执行的一行，不需加return,加上return就必须声明返回值类型，如def a():T={return ..}
  break/continue在c++中非常常见，在scala中是不必要的，可以通过if进行控制

数组
  val A=new Array[Int](4) //定长数组声明，4个元素Int默认值0
  val A=Array(1, 2) // 两个元素，1,2
  val G=B+Array(1,2) //重新生成一个数组  val G=B-Array（1,2） 
  import scala.collection.mutable.ArrayBuffer
  val C=new ArrayBuffer[String]() // 变长数组，要声明类型，否则使用+=的时候会报错
  C += "aa"  // 添加元素 
  C += "bb"
  C+=("cc", "dd") // 添加两个元素
  C++=Array("ee", "ff") // 使用++添加一个数组。 aa,bb,cc,dd,ee,ff
  C.trimEnd(1) // 删除最后一个元素，会改变C而不是返回一个新的数组。 aa,bb,cc,dd,ee
  C.insert(2, "ee") // 在第个二位置插入ee, 可以插入多个C.insert(2, "ee", "ff")
  C.remove(3) //删除地三个元素 C.remove(3,2) 删除第三个元素后2个元素
  D=C.toArray // 转换为定长数组
  E=D.toBuffer // 转换为变长数组
  for(i <- C) println(i) //直接遍历数组成员
  for(i <- 0 to (C.length-1)) println(c(i)) //通过下标遍历
  for(i <- 0 to (C.length,2 )) // 每个两个元素取一个
  for(i <- 0 to (C.length).reverse) // 反序遍历
  val NEW=for(i <- C) yield i+1 //如果C是定长，NEW就是定长，C是变长，NEW就是变长

映射Map: 包含不可变映射和可变映射
  // 不可变映射
  val Z=Map(a1->b1, a2->b2)
  val Z=Map((a1,b1), (a2,b2))
  // 可变
  val Y=scala.cellection.mutable.Map((a1,b1), (a2,b2))
  val X=new scala.collection.mutable.Map[Int, String] //没有初始值的可变映射
  val a=Z(an) //返回值
  val b=Z.get(an) //返回对象Option，避免空指针异常
  val c=Z.contains(an) //判断是否有值
  val d=Z.getOrElse(an, 0) // 没有则返回0
  Y+=(a4->b4, a5->b5) //添加新键值对
  Y-=a4 //删除键值对
  val W=Z+(a4->b4, a5->b5) //对于不可变map,这回从新构造一个新的Map
  val V=W-(a4->b4, a5->b5) 
  for((i,j) <- Z) E(i,j) // 遍历Map
  for((i,j) <- Z) yield (j,i) // 互换键值
  val e=Z.keySet // key集合
  val f=Z.values // value集合

元组tuple
  map是二元的元组，元组是不同类型的值的聚集，若干个单个的值包含在圆括号中便构成了元组
  val g=(1, 1.2, 'A') // (Int, Double, Char)的元组
  val h=g._1 // 或val h=g _1 。使用_1、_2来访问元组的组元
  // 使用zip能把几个集合结合起来
  val one=Array('a', 'b', 'c')
  val two=Array(1,2,3)
  val three=one.zip(two) // 或val three=one zip two   Array[(Char, Int)] = Array((a,1), (b,2), (c,3))
  val four=one.zip(two).toMap 或 val hour= one zip two toMap

包引入
  import scala.collection.{A, B} // 引入多个包
  import scala.cellection.mutable._ // 引入该包下所有成员
  import java.util.{HashMap => JavaHashMap} //引入并重命名
  import java.util.{HashMap => _, _} // 隐藏，可能引入了util下的所有，但是HashMap冲突了不需要使用，将它隐藏
  scala默认引入3个包： java.lang._, scala._, Predef._
  引入a.b._ 并不会引入a._ 。 引入a._也不会引入a.b._
  引入可以在文件的开头，也可以在使用之前才引入。 引入有范围，花括号

类定义
  class HELLOWORLD {
    val value1 = "HELLO"
    var value2 = "WORLD "
    def add() {println(value1+value2)}
    def plus(m:char)=value2+m
    private var _value3 = "aa" // 这里用下划线只是自己标识它是一个私有变量
    // 如下是实现setter方法。var可以实现setter,val没有setter
    def value3 = _value3  // getter
    def value3_ = (newValue3:String) {  //setter
      if(newValue3.length>_value3.length) _value3=newValue3
    }

  }
  val one = new HELLOWORLD
  one.add() // 或者one.add，注意如果声明无参方法时没有带()，带哦用也不可以带()

构造器
  主构造器 
    class HELLOWORLD(val value1:String, var value2:String) {
      pirntln("created")
      val value3 = value1 + value2 
    }
    val two = new HELLOWROLD("welcome", "home")
    主构造器的参数一般有四种：
    value:String 生成自由字段，对象有没有方法使用value,则没有该字段
    private val/var value:String sioux字段，私有的getter/setter方法
    val/var value:String 私有字段，共有的getter/setter方法
    @BeanProperty val/var:String 私有字段，共有的Scala和JavaBean的getter/setter方法
    class HELLOWORLD private (主构造器) {类成员} // 主构造器私有，只能通过辅助构造器构造对象
  辅助构造器。 可以有任意多个辅助构造器，用this作为方法名
    class HELLOWORLD{
      private var value1=""
      private var value2=""
      def this(m:String) {
        this() //调用默认的主构造器
        this.value1=m
      }
      def this(m:String, n:String) {
        this(m)
        this.value2=n
      }
    }

单例对象
  object语法定义莫格勒的单例，对象的构造器在该对象第一次被使用时调用。object语法结构与class大致相同，除了object不能提供构造器参数。通常用于：1，作为存放工具函数或者常量。2，共享单个不可变实力。3，利用单个实例协调某个服务
伴生对象
  当一个单例对象存在同名类的时候，称为伴生对象
  class HELLOWORLD{}
  object HELLOWROLD{ def NOW{} }
  类和其伴生对象可以互相访问私有属性，但必须存在同一个源文件中，类的伴生对象可以被访问，但不存在作用于中，如：
  HELLOWORLD类必须通过HELLOWORLD.NOW调用伴生对象中的NOW方法，而不是直接用NOW调用
apply方法
  需要构造有参数需求的伴生对象时，可定义并使用apply方法
  class HELLOWORLD(var m:String, n:Char) {...}
  object HELLOWORLD {
    def apply:(n:Char)=new HELLOWRLD(" ", n)
  }
  val hi = HELLOWORLD('j')

继承
  class week extends month{  // 继承
    override def firstday = {...} // 重写
    // 重写规则：子类中，def只能重写超类的def，
    // val能重写超类的val或不带参数的def，
    // var只能重写 超类中抽象的var（定义了类型没有赋初值的var）或者超类的getter/setter对
  } 
  class month{ 
    val one = 25  //可在子类中用val重写 
    var two = 15 //不可在子类中用var重写，因为不是抽象的 
    var three：Int def firstday = //可在子类中用val重写 
    def now = //getter/setter 可在子类中用var重写 
    def now_ =                                 
    def lastday(m:Char)={} //可在子类中用def重写 
  }

抽象类，不能被实例化
  abstract year {
    val name:Array[String] //抽象的val，带有一个抽象的getter
    val num:Int //抽象的var,带有抽象的getter/setter方法
    def sign // 没有方法提/函数体，是一个抽象方法
  }
  只要类中有任意一个抽象成员，必须使用abstract标记

保护
  final class year{..} 不可继承
  class year{ final def sign{...}} 不可重写
  protected 对子类可见，private对本类可见

构造
  子类构造器运行在超累构造器之后，在超类的构造器中调用的成员被子类重写后，返回值可能不正确： 
  class month {
    val num = 31
    val days = new Array[Int](num)
  }
  class week extends month {
    overwrite val num=7
  }
  val a = new week
  先调用父类构造器，但num被子类week重写了，但因为week构造器还没被调用，此时 num的值未被初始化，因而返回0，days被设置为长度为0的数组，month构造器运行 完毕，执行week构造器，num被初始化为7
  解决办法：
    将超类的val声明为final， 不灵活
    将超类的val声明为lazy, 慢
    在子类中使用预定义语法
       class week extends {override val num =7} with month{...} 

特质trait，类似java的接口
  Scala不支持多重继承，但可以扩展多个特质
  trait reset{ 
    def reset(m:Int,n:Int)={}
  } 
  class week extends reset {...}  // 混入一个特质
  class week extends reset with B with C {...} //混入多个特质
  特质的成员可以是抽象的，而且，不需要使用abstract声明 
  trait reseting extends reset{...}  // 在特质定义中混入特质
  val five = new month with reseting //在对象构造时混入特质 
  如果class A extends B1 with B2 with B3.... 那么，串接B1、B2、B3...等特质，去掉重复项且右侧胜出
  特质的一个主要应用方面在于接口，根据类已有的方法自动为类添加方法：
  trait Logger{
    def log(msg:String) 
    def warn(msg:String) { log(“server”+msg) } 
    def server(msg:String) { log(“server”+msg) }
  } 
  class week extends Logger{ 
    def log(msg:String){println(msg)}
    server(“HI”) // 根据log方法有了Logger的方法
  }
  特质的另一个应用方面在于：为类提供可堆叠的改变（super保留字）：
  abstract class IntQueue {  def get(): Int；def put(x: Int)  } 
  class BasicIntQueue extends IntQueue {
    private val buf = new ArrayBuffer[Int] 
    def get() = buf.remove(0) 
    def put(x: Int) { buf += x } 
  } 
  trait Incrementing extends IntQueue { 
    abstract override def put(x: Int) { super.put(x + 1) } 
  } 
  trait Doubling extends IntQueue { 
    abstract override def put(x: Int) { super.put(2 * x) } 
  }
  object TestClient extends App { 
    val queue1 = (new BasicIntQueue with Incrementing with Doubling) 
    queue1.put(2)            //Doubling.put(2*2)->Incrementing.put(4+1)。 从最右的trait开始执行
    println(queue1.get()) //result is 5

    val queue2 = (new BasicIntQueue with Doubling with Incrementing) 
    queue2.put(2)            //Incrementing.put(2+1)->Doubling.put(2*3) 
    println(queue2.get()) //result is 6
  }


----------
import scala.io.Source
val files = Source.fromFile("c:/test.txt") // fromURL可以获取url的文字流
for(line <- files) println(line)

使用递归函数必须指定返回值类型

val d = ArrayBuffer(1,3,2)
d.sorted # 返回排序好的array
val e = Array(1,3,2)
scala.util.Sorting.quickSort(e) # 快速排序，改变e本身
e.mkString(" and ") # 1 and 2 and 3
e.mkString("<", ",", ">") # <1,2,3>
Array(1,2,3).sum #求和，max最大值
val matrix=Array.ofDim[Double](3,4)
val triangle=new Array[Array[Int]](10)
for(i <- 0 util triangle.length)
  triangle(i)=new Array[Int](i+1)

---
默认的map是不可修改的，要修改使用
val scores=scala.collection.mutable.Map("a" -> 1, "b" -> 2)
val value=scores.getOrElse("a", 0)
scores += ("c" -> 3) 
scores -= "b" #根据key删除元素
val sortedMap = scala.collection.immutable.SortedMap("c"->3, "b"->2) # 根据key排序的map

Console.print("a" * 5) 打印a 5次
val tuple=(1, 2, 3.14, "a", "b")
val third = tuple._3 #也可以tuple _3来取
val (first, second, third2, fouth, fifth) = tuple
val (f, s, _, _, _) = tuple #不需要使用后三个， 使用占位符_

class Persion {
  private var age = 0 #private属性必须初始化的时候赋值
}

class Student {
  var age = 0 #默认是private,并且会生成getter setter方法
  val name="a" #val默认会生成getter
  private[this] nickname = "jack" 
  // s1、s2是Student的两个对象，可以相互访问private属性但不能访问[this]

  def this(name:String) { //重载的构造方法
    this  // 需要先调用一个构造方法，默认的主构造方法是无参的
    this.name = name
  }

}

class Student (val name : String, val age : Int) { // ()是主构造方法的参数列表
  println("构造方法。不是def的方法都是构造方法")
  var name : String = _
  println(gender)
  def this(name:String, age:Int, gender:String) {
    this(name, age) //必须调用一个构造方法
    this.gender = gender
  }

内部类：
  Java的内部类是从属于外部类的，scala是从属于对象的
class Outer(val name: String) { outer => // 通过outer这个名字让内部类可以访问外部类
  class Inner(val name: String) {
    def foo(b:Inner) = println("Outer: " + outer.name + " Inner: " + b.name)
  }
}
object OOPInScala {
  def main(args: Array[String]) {
    val outer1 = new Outer("spark")
    val outer2 = new Outer("Hadoop")
    val inner1 = new outer1.Inner("Scala")
    val inner2 = new outer1.Inner("Java")
    inner1.foo(inner1)
    inner2.foo(inner2)
  }
}

类与对象的apply方法
  val arr = Array(1,2,3) #调用Array对象的apply方法
  val arr2 = new Array[Int](4)
  println(arr2(1)) # 通过 对象() 调用类的apply方法

抽象类
abstract class SuperTeacher(val name : String) {
  var id : Int
  var age : Int // 没有值也没有占位符_的字段就是抽象字段
  def teach   //没有方法体的方法就是抽象方法，不用加abstract关键字
}
如果重写的方法是抽象的就可以不加override，否则要加

接口 trait特质
trait与java接口不同的是，trait不必所有方法都是抽象的，可以有实现的方法
trait Logger {
  def log(msg:String) {}
}
class ConcreteLogger extends Logger with Cloneable { //实现多个trait
  
}
trait TraitLogger extends Logger {
  override def log(msg:String) {
    println("trait logger: " + msg)
  }
}

val logger = new ConcreteLogger with TraitLogger //对象动态混入特质
logger.log

包：除了像java一样以目录作为包，scala可以在代码里定义包
package com 
package scala 下面代码的作用域都是com.scala开头
package spark.navigation {
  class Navigator
  package tests {
    // 在com.scala.spark.navigation.tests包里
    class NavigatorSuite
  }

  // 包对象people
  package object people {
    val defaultName = "scala"
  }
  package people {
    class people {
      val name = defaultName //包可以使用包对象中定义的字段或方法
    }
  }
}

正则
val numPattern = "[0-9]+".r // .r表示正则表达式
val numberPattern = """\s+[0-9]+\s+""".r // """里面的特殊字符不需要转义
// findAllIn方法遍历所有匹配的迭代器
for(matchString <- numPattern.findAllIn("1232 scala, 123 spark")).println(matchString)
// 查找首个匹配项
println(numberPattern.findFirstIn("1232 scala, 123 spark"))

// case中使用
val numitemPattern="""([0-9]+) ([a-z]+)""".r
//val numitemPattern(num, item) = "99 hadoop"
val line = "93829 spark"
line match {
  case numitemPattern(num, blog) => println(num + "\t" + blog)
  case _ => println("ohh")
}

sam代码样例
var data=0
val frame = new JFrame("SAM Testing")
val jButton = new JButton("counter")
jButton.addActionListener(new ActionListener {
  override def actionPerformed(event: ActionEvent) {
    data += 1
    println(data)
  }
})
// 添加事件每次都要new一个对象，sam使我们直接添加代码逻辑，而不需要多余的代码样板
// 声明隐式转换，将代码逻辑转换为类
implicit def convertedAction(action: (ActionEvent) => Unit) =
  new ActionListener {
    override def actionPerformed(event:ActionEvent) {
      action(event)
    }
  }
jButton.addActionListener((event: ActionEvenet) => {data += 1; println(data)})
frame.setContentPane(jButton)
frame.pack()
frame.setVisible(true)


val a = List(1,2,3,4,5)
a partition (_%2 == 0) //(List(2,4), List(1,3,5))
a find (_ % 2 ==0) // Some(2)
a find (_ <=0) // None
a takeWhile (_ < 4) // List(1,2,3)
a dropWhile (_ < 4) // List(4,5)
a span (_ < 4) // span速度比partition快。(List(1,2,3), List(4,5))

def hasTotallyZeroRow(m: List[List[Int]]) = m exists (row => row forall (_ == 0))
val m=List(List(1,0,0), List(0,1,0), List(0,0,0))
println(hasTotallyZeroRow(m)) // true
// exists要求只要有个List满足即返回true，forall要求List的每个元素满足

(1 to 100).foldLeft(0)(_+_) // 0是初始值，加1后迭代加2，一直加到100
0 /: (1 to 100)(_ + _) // foldLeft的符号写法
(1 to 5).foldRight(100)(_-_) //-97  5-(4-(3-(2-(1-100))))
(1 to 5):\100(_-_)

a sortWith (_ < _) // 第一个元素要小于第二个元素，即升序排序 
a sortWith (_ > _) // 降序排序

List.apply(1,2,3) // List(1,2,3)
List.make(3,5) // 3是重复次数，5是元素值 List(5,5,5)
List.range(1,5) // List(1,2,3,4) 左闭右开。 还可以在第三个参数指定步长，默认1
List.range(9,1,-3) // List(9,6,3)

ListBuffer, ArrayBuffer, Queue, Stack
-----
import scala.collection.mutable.ListBuffer
val listBuffer = new ListBuffer[Int]
listBuffer +=1
listBuffer +=2 
println(listBuffer) // ListBuffer(1,2)

import scala.collection.mutable.ArrayBuffer
val arrayBuffer = new ArrayBuffer[Int]()
arrayBuffer += 1
arrayBuffer += 2 // ArrayBuffer(1,2)

val empty = Queue[Int]() //没有import，默认是immutable
val queue1 = empty.enqueue(1) // 因为不可变，返回一个新的queue
val queue2 = queue1.enqueue(List(2,3,4,5))
val (element, left) = queue2.dequeue // 返回第一个元素和剩下的元素

import scala.collection.mutable.Queue
val queue = Queue[String]()
queue += "a"
queue ++= List("b", "c")
queue.dequeue # 和imtable不同，这里是删除第一个元素

import scala.collection.mutable.Stack
val stack = new Stack[Int]
stack.push(1)
stack.push(2)
stack.push(3)
statck.top // 获取栈顶3
stack.pop // 弹出栈顶3


Actor
-----
import scala.actors.Actor

object First_Actor extends Actor {
  def act() {
    println(Thread.currentThread().getName())
    for (i <- 1 to 10) {
      println("Step : " + i)
      Thread.sleep(2000)
    }
  }
}
object Hello_Actor {
  def main(args: Array[String]) {
    First_Actor.start // 启动线程，调用act方法
  }
}
---
import scala.actors.Actor._
object Actor_Message extends Actor{
  def act() {
    while(true) {
      receive {    // 偏函数receive
        case msg => println("Message content Actor from inbox: " + msg)
      }
    }
  }
}
object Actor_Messages {
  def main(args: Array[String]) {
    val actor_Message = actor { // 使用actor工具方法创建匿名的actor
      while(true) {
        receive {
          case msg => println("Message content from inbox: " + msg)
        }
      }
    }

    val double_Message = actor { // 使用actor工具方法创建匿名的actor
      while(true) {
        receive {
          case msg : Doule => println("Double Number from inbox: " + msg)
          case _ => println("unknown")
        }
      }
    } 

    actor_Message ! "Spark" //发送消息
    double_Message ! Math.PI
    Actor_Message.start
    Actor_message ! "hadoop" 
    // receive接收方法会先调用isDefineAt查看该消息类型对应的case有没定义，没有则忽略该消息，有则取第一个isDefineAt返回true的，然后调用apply方法
  }
}

--- 
case class Person(name:String, age:Int)

class HelloActor extends actor {
  def act() {
    while(true) {
      receive {
        case Persion(name, age) => {
          println("Name: " + name + " age: " + age)
          sender ! "Echo!!" // 给发送者发消息
        }
      }
    }
  }

  def main(args: Array[String]) {
    val helloActor = new HelloActor
    helloActor.start
    helloActor ! Persion("zhangsan", 15)
    helloActor.receive{case msg => println(msg)} // 一直接收
    helloActor.receiveWithin(1000){case msg => println(msg)} // 一秒后停止
  }
}

react和loop
----
object NameResolver extends Actor {
  def act() {
    react { // react的代码块不用返回，从而可以进行线程复用
      case Net(name, actor) =>
        sender ! getIp(name)
        act // 不返回，所以不会保存调用堆栈。重新调用，就需要while(tue)了
      case "EXIT" => println("Name resolver exiting.")
      case msg => 
        println("Unhandled message : " + msg)
        act
    }

    //loop { // 重复执行
    //  case Net(name, actor) => 
    //    sender ! getIp(name) =>
    //  case msg => 
    //    println("Unhadled message : " + msg)
    //}
  }
}

模式匹配
-----------
for循环模式匹配
for(i <- List(1,2,3,4)) {println(i)}
for(index@"Flink" <- List("hadoop", "spark", "Flink")) {println(index)} // 遍历list，匹配Flink，index是别名
for((language, "Hadoop") <- Set("Scala"->"Spark", "Java"->"Hadoop")) println(language) //Java
for((k,v:Int) <- List( ("Spark"->5), ("Hadoop"->"Big data") )) {println(k)}

val a@b=100 // @是别名，赋值给变量b，a是b的别名
val (c, d)=(100, 200)
//val (e, F)=(100, 200) //大写F要是常量val类型的，这里会报错，要预先定义F,预先定义就不能放在tuple内
//val Array(i, J) = Array(100, 200) //同样J不能是大写的


提取器
object :> {
  def unapply[A] (list: List[A]) = { // case进行模式匹配时会调用unapply提取值
    Some( (list.init, list.last) )
  } 
}
object Extractor_advanced {
  def main(args: Array[String]) {
    (1 to 9).toList match{ case _ :> 9 => println("hadoop")} 
    (1 to 9).toList match{ case x :> 8 :> 9 => println("spark") }
  }
}

Actor akka
-----
Message.scala
  import java.util.{HashMap, ArrayList}

  class World(val word:String, val count:Integer)
  case class Result
  class MapData(val dataList: ArrayList[World])
  class ReduceData(val reduceDataMap: HashMap[String, Intger])

object MapReduceApplication {
  def main(args: Array[String]) {
    val _system = ActorSystem("HelloAkka")
    val master = _system.actorOf(Props[MasterActor], name="master")

    master ! "Hi! my name is xx. so so happy"
    master ! "I hope you'll like it"

    Thread.sleep(500)
    master ! new Result
    Thread.sleep(500)
    _system.shutdown
  }
}

class MasterActor extends Actor {
  val aggregateActor:ActorRef = context.actorOf(Props[AggregateActor], name="aggregate")
  val reduceActor:ActorRef = context.actorOf(Props(new ReduceActor(aggregateActor)), name="reduce")
  val mapActor:ActorRef = context.actorOf(Props(new MapActor(reduceActor)), name="map")

  def receive: Receive = {
    case message:String =>
      mapActor ! message
    case message:Result =>
      aggregateActor ! message
    case _ =>
  }
}

class MapActor(reduceActor: ActorRef) extends Actor {
  val STOP_WORDS_LIST = List("a", "is")

  def receive: Receive = {
    case message: String =>
      reduceActor ! evaluateExpression(message)
    case _ =>
  }

  def evaluateExpression(line: String):MapData = {
    var dataList = new ArrayList[Word]
    var parser: StringTokenizer = new StringTokenizer(line)
    var defaultCount:Integer = 1
    while(parser.hasMoreTokens()) {
      var word: String = parser.nextToken().toLowerCase()
      if (!STOP_WORDS_LIST.contails(word)) {
        dataList.add(World(word, defaultCount))
      }
      return new MapData(dataList)
    }
  }
}

class ReduceActor(aggregateActor: ActorRef) extends Actor {
  def receive: Receive = {
    case message: MapData =>
      aggregateActor ! reduce(message.dataList)
    case _ =>
  }

  def reduce(dataList: ArrayList[Wold]): ReduceData = {
    var reduceMap = new HashMap[String, Integer]
    for (wc:Word <- dataList) {
      var word: String = wc.word
      if(redeceMap.containsKey(word)) {
        reduceMap.put(word, reduceMap.get(word)+1)
      } else {
        reduceMap.put(word, 1)
      }
    }
    return new ReduceData(reduceMap)
  }
}

class AggregateActor extends Actor {
  var finalReduceMap = new HashMap[String, Integer]

  def receive: Receive = {
    case message: ReduceData =>
      aggregateInMemoryReduce(message.reduceDataMap)
    case message: Result =>
      System.out.println(finalReduceMap.toString())
  }

  def aggregateInMemoryReduce(reducedList: HashMap[String, Integer]) {
    var count: Integer = 0
    for (key <- reduceList.keySet) {
      if(finalReduceMap.containsKey(key)) {
        count = reducedList.get(key)
        count += finalReduceMap.get(key)
        finalReducedMap.put(key. count)
      } else {
        finalReducedMap.put(key, reducedList.get(key))
      }
    }
  }
}

--------
类型变量Bounds
// 泛型T是Comparable的子类，Comparable是上届
class Pair_NotPrefect[T <: Comparable[T]](val first : T, val second : T) {
  def bigger = if(first.compareTo(second) > 0) first else second
}
class Pair[T >: Comparable[T]] // T是父类
class Pair_NotPrefect[T <% Comparable[T]](val first : T, val second : T) 
// <%是view Bounds视图界定，意思是T可以隐式转换为Comparable类型
// val pairInt = new Pair_NotPerfect(3,5) //使用<:会报错，<%就可以。Int转换为RichInt

// Comparable比较要使用compareTo,Ordered比较可以直接用操作符> <
class Pair_Better[T <% Ordered[T]](val first : T, val second : T) {
  def bigger = if(first > second) first else second
}

Context Bounds上下文界定 :，T是泛型类型，Ordering必须是有泛型的类或接口。通过隐式参数来使用Ordering的compare方法，这样就不需要传进来的参数必须实现接口
class Pair_Ordering[T : Ordering] (val first : T, val second : T) {
  def bigger(implicit ordered : Ordering[T]) = { // 隐式参数，即不用传也有默认参数
    if (ordered.compare(first, second) > 0) first else second
  }
}

// ClassTag、Manifest、ClassManifest、TypeTag
def array[T : Manifest](first : T, second : T) = {
  val r = new Array[T](2); //本来不能创建泛型数组，必须指定具体类型。使用Manifest就可以保存实际传进来的类型的信息。
  r(0) = first; r(1)=second; r
}
arrayMake(1, 2).foreach(println) // 可以类型推断，传入Int参数，T就为Int
泛型T在运行是指定的信息是会被擦除的，通过Manifest来保存类型信息
Manifest在路径依赖的时候会出现问题，使用ClassTag就没问题
ClassTag只保存运行时的类型信息，TypeTag还包含一些静态信息
ClassTag用得最多，替换Manifest。 TypeTag替换ClassManifest

类型约束 
// A =:= B //标示A类型等于B类型
// A <:< B //标示A类型是B的子类型。 比<:更严格
//A<%<B是A可以转换为B，但是scala 1.x已废弃
def rocky[T](i:T)(implicit ev: T <:< java.io.Serializable) { 
  print("hello")
}
rocky("spark")

协变Variance
class Person
class Student extends Person
class C[+T](val args:T) // +协变，-逆变
trait Friend[-T] {
  def makeFriend(somebody: T)
}
协变：Student是Persion的子类，C[Student]就是C[Persion]的子类

终止表达式
object Log{ def >>:(data:String):Log.type = {println(data); Log}}
"Haddoop" >>: "Spark" >>: Log // 终止表达式是右结合的，链式调用两次

val list = List()
val newList = "A" :: "B" :: list // ::也是终止表达式，右结合
println(newList)

终止类型 infix type
val infix: Int Infix_Type String = null

case class Cons(first:String, second:String)
val case_class = Cons("one", "two")
case_class match {case "one" Cons "two" => println("spark")}

class A {
  self =>   // 意思是self是this的别名
  ..
}



链式调用要声明返回类型为this.type，而不是this

-----------------------
import sys.process._
"ls -al" ! #导入之后可以通过!来调用系统命令

val patten = "[a-z]+".r # str to regex
patten.findFirstIn("hello world") # Some(hello)
for( item <- patten.findAllIn("hello world")) println(item) # 返回iterator, hello world
patten.replaceAllIn("hello world", "123") # 返回string 123 123

scala继承体系，源头在Any, 一分为二AnyRef和AnyVal, Null是所有引用的子类，只有一个实例为null, 最终在Nothing, Nothing没有实例
Null和Nothing都是继承结构的最低端，Null是任意AnyRef类型的最低端,所以不能将null赋值给Int(AnyVal)，而Nothing是其他类型的最底端（包括Null）
scala.collection.immutable.Nil其实就是List<Nothing>

trait可以的class可以通过javap查看反编译，如果没有实现会编译成interface，如果有实现会编译成abstract class,实现的方法为static
trait不能定义var字段，可以定义val字段
trait可以当作interface使用，也可以同成util来使用
scala没有static关键字，要使方法只有一份，可以使用object或者trait

extends App可以直接在object中写代码，不用写main方法直接可以运行,args可以直接使用

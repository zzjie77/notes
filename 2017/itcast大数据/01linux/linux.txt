修改Linux的基本配置
    1.修改主机名
    vi /etc/sysconfig/network
    NETWORKING=yes
    HOSTNAME=server1.itcast.cn

    2.修改ip地址
    vi /etc/sysconfig/network-scripts/ifcfg-eth0
    DEVICE=eth0
    TYPE=Ethernet
    ONBOOT=yes
    BOOTPROTO=static
    IPADDR=192.168.0.101
    NETMASK=255.255.255.0
    service network restart

    3.修改ip地址和主机名的映射关系
    vi /etc/hosts
    192.168.0.101 server1.itcast.cn

    4.关闭iptables并设置其开机启动/不启动
    service iptables stop
    chkconfig iptables on
    chkconfig iptables off

安装JDK
    1.上传jdk-7u45-linux-x64.tar.gz到Linux上
    2.解压jdk到/usr/local目录
    tar -zxvf jdk-7u45-linux-x64.tar.gz -C /usr/local/
    3.设置环境变量，在/etc/profile文件最后追加相关内容
    vi /etc/profile
    export JAVA_HOME=/usr/local/jdk1.7.0_45
    export PATH=$PATH:$JAVA_HOME/bin
    4.刷新环境变量
    source /etc/profile
    5.测试java命令是否可用
    java -version
 
YUM的常用命令
    安装httpd并确认安装
    yum instll -y httpd

    列出所有可用的package和package组
    yum list

    清除所有缓冲数据
    yum clean all

    列出一个包所有依赖的包
    yum deplist httpd

    删除httpd
    yum remove httpd

批量自动删除rpm包：
    rpm -qa | grep mysql | while read c; do rpm -e $c --nodeps; done

修改静态地址后发现无法ping外网
    需要设置网关
    route add default gw 192.168.33.1
    添加nameserver
    vi /etc/resolv.conf
    nameserver 192.168.33.1

挂载光盘
    mkdir /mnt/cdrom
    mount -t iso9660 -o ro /dev/cdrom/ /mnt/cdrom 

虚拟机解决克隆后eth0不见的问题
    直接修改  /etc/sysconfig/network-script/ifcfg-eth0
    删掉UUID  HWADDR
    配置静态地址
    然后：
    rm -rf 　/etc/udev/rules.d/70-persistent-net.rules
    然后 reboot


tar -cvf itcast.tar itcast
tar -zxvf itcast.tar.gz -C /usr/
tar -jcvf /tmp/itcast.tar.bz2 itcast
tar -jxvf itcast.tar.bz2 -C /usr/

stat a.txt 查看文件详情
修改主机名
hostname hadoop 
vi /ect/sysconfig/network

修改IP
ifconfig eth0 192.168.12.22
vi /etc/sysconfig/network-scripts/ifcfg-eth0

查看系统信息
uname -a
uname -r

yum list|grep lrzsz
rz -y 存在文件则覆盖

. /root/helloWorld.sh
. ./helloWorld.sh  # 加了一个点不会新开一个bash来执行，在当前sh执行，如果脚本中有变量赋值，这种方式能看到执行后的变化
set 查看所有环境变量

STR="hello world" # 变量名习惯大写， 等号两边不能有空格， 双引号里面可以通过$var来读取变量，单引号不行
export STR="hello world" # export全局变量
A=`ls -la`  等价于 A=$(ls -la) 

$? 表示上一个命令退出的状态
$$ 表示当前进程编号
$0 表示当前脚本名称
$n 表示n位置的输入参数（n代表数字，n>=1）
$# 	表示参数的个数，常用于循环
$*和$@ 都表示参数列表 

$*与$@区别： $* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号" "包含时，for in 都以$1  $2  … $n 的形式输出所有参数
当它们被双引号" "包含时，"$*" 会将所有的参数作为一个整体，以"$1 $2 … $n"的形式输出所有参数；"$@" 会将各个参数分开，以"$1" "$2" … "$n" 的形式输出所有参数

(2 ＋3 )×4 的值
S=`expr 2 + 3`	 # expr方式，运算符两边必须有空格
expr $S \* 4 

echo `expr \`expr 2 + 3\` \* 4`
$(((2+3)*4))  # 只是在$()里面多加一个()就可以写表达式

for:
    for N in 1 2 3
    do
        echo $N
    done
    或
    for N in 1 2 3; do echo $N; done
    或
    for N in {1..3}; do echo $N; done


    for ((i = 0; i <= 5; i++)) 
    do
        echo "welcome $i times"
    done
    或
    for ((i = 0; i <= 5; i++)); do echo "welcome $i times"; done

while:
    while expression
    do
    command
    …
    done

case: 
    case $1 in
    start)
        echo "starting"
        ;;
    stop)
        echo "stoping"
        ;;
    *)
        echo "Usage: {start|stop} “
    esac

if: 
    read -p "please input your name:" NAME
    #printf '%s\n' $NAME
    if [ $NAME = root ]
            then
                    echo "hello ${NAME},  welcome !"
            elif [ $NAME = itcast ]
                    then
                            echo "hello ${NAME},  welcome !"
            else
                    echo "SB, get out here !"
    fi

判断语句
[ condition ] (注意condition前后要有空格)
#非空返回true，可使用$?验证（0为true，>1为false）
[ itcast ] # 只要有内容就是true， 即使没定义这个变量
[  ]  # false
[ condition ] && echo OK || echo notok # if else 简化写法
= 字符串比较
-lt 小于
-le 小于等于
-eq 等于
-gt 大于
-ge 大于等于
-ne 不等于
-f 文件存在并且是一个常规的文件
-d 文件存在并是一个目录

自定义函数
[ function ] funname [()]
{
    action;
    [return int;] 
}
function start()  / function start / start() # 三种写法都可以
函数返回值，只能通过$? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)

sh -vx helloWorld.sh # 调试sh, 或者在脚本中增加set -x

tail -f install.log    小f跟踪文件的唯一inode号，就算文件改名后，还是跟踪原来这个inode表示的文件
tail -F install.log    大F按照文件名来跟踪, log4j会将rename xx.log  xx-date.log。 这时使用-f不会刷新
 
 

